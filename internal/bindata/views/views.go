// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/article.html
// web/views/categories.html
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/home.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _articleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\xc8\x2f\x2e\xd1\x2d\x48\x4c\x4f\x55\xb2\xe3\x52\x50\xa8\xae\xd6\x73\x2c\x2a\xc9\x4c\xce\x49\xad\xad\xe5\xb2\xd1\x4f\xc9\x2c\xb3\xe3\x02\x04\x00\x00\xff\xff\x77\x93\x46\x1f\x2e\x00\x00\x00")

func articleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_articleHtml,
		"article.html",
	)
}

func articleHtml() (*asset, error) {
	bytes, err := articleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "article.html", size: 46, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _categoriesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\xaa\xdb\x30\x10\x86\xf7\x39\xc5\xe0\x7d\xac\x0b\x28\x86\x90\x6e\x0a\xa1\x14\x9a\x0b\xa8\xf6\xc4\x1e\x2a\xcb\x46\x92\x93\xc5\x20\xe8\xaa\x29\x3d\x40\x57\xdd\x94\x1e\x20\x74\xdd\xf3\xd4\xb9\x46\xb1\x62\x07\x37\x8f\x07\xef\xc1\xe3\xed\x64\xeb\x1f\xfd\xff\xcc\x37\xcc\xb4\x87\xf4\x43\xd5\x1c\xd7\x5a\x87\xb0\x90\x05\x1d\x20\xd7\xca\xb9\x55\xa2\x6c\x5e\xd1\x01\x41\x19\xaa\x95\xc7\x02\xf6\xaa\xc0\xb7\xe6\x4d\x73\x34\x49\xb6\x00\x90\xed\xa4\x6c\x1b\xe7\x97\x9e\xbc\xc6\x24\xfb\xfb\xf5\xcb\xe5\xf7\x1f\x90\xa2\x8d\x9a\x4e\x4f\x22\x4d\xce\x93\x29\x63\x29\x00\xb3\x55\xa6\x44\x48\x77\x16\x71\x6d\x3d\xe5\x1a\x5d\x08\xf1\x4e\x6a\xba\x2b\x5a\x92\xc7\x7a\xac\x04\x98\x87\x9c\x04\x43\x84\x9b\xe0\xb1\x6c\x52\x41\x65\x71\xbf\x4a\x44\xae\x3c\x96\x8d\x25\x74\x82\x39\x7d\xa7\x6a\x0c\x21\x81\x28\x5b\x25\xfd\xb7\xcf\xfd\x8f\x73\xff\xfd\xd4\xff\xfc\x95\x64\xb7\x7b\x29\x54\x36\xb6\x35\x9a\xb8\x56\x99\xc9\xa7\x50\x1e\xa1\x46\xaf\xc6\xac\xcc\x25\xfa\x4d\x45\xba\xb0\x68\x36\x4d\x67\x3c\xa4\x21\xc0\xe5\x7c\x92\x62\xa8\xbb\x35\x23\x0a\x3a\x5c\x3f\xa4\xd0\x34\x4d\x07\x4d\x11\xa7\x21\x45\xa7\xb3\xc5\x28\x62\x46\xed\xf0\x25\x31\x31\xa7\x9b\x69\x14\x43\x87\x4f\x84\xb6\x25\xe7\x5f\x0f\x96\xba\xae\x07\x73\xba\x25\xf3\x69\x06\x8a\x39\xdd\x0d\xa7\x10\x22\xa6\xf1\xfc\x90\xd3\x2c\xc2\xe8\x50\xe3\xcc\xff\x8e\xa4\xb2\xcb\x01\x66\x7c\xf2\x7d\xf7\x51\x93\xab\x76\x74\x5d\x80\x39\xb8\xff\xd0\x3d\x9b\x63\xfc\xfd\x2f\x00\x00\xff\xff\x36\x43\x51\x70\x7e\x03\x00\x00")

func categoriesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_categoriesHtml,
		"categories.html",
	)
}

func categoriesHtml() (*asset, error) {
	bytes, err := categoriesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.html", size: 894, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4e\xc4\x30\x10\x45\xfb\x9c\x62\x64\xea\x8d\x2f\xe0\x75\x43\xbb\xc5\x16\x7b\x81\xd9\x64\xc8\x8e\x48\x9c\xc8\x1e\x82\xd0\xc8\x15\x3d\x88\xdb\x20\xce\xc3\xde\x03\x25\x4b\x10\x91\x52\xda\xcf\xff\xe9\x7f\xab\x46\x0c\x0d\x41\x79\xe0\x24\x39\x17\xae\xe6\x11\xaa\x16\x53\xda\x9b\xa1\x4f\xb2\xab\xfa\x20\xc8\x81\xa2\xf1\x05\x80\x1b\x56\x50\x58\x5a\x32\xde\x21\x5c\x22\x3d\xec\x8d\xc5\x28\x5c\xb5\xa4\x5a\x1e\x38\x3c\xe6\x6c\xbc\x6a\x79\x9a\x5e\xe5\xec\x2c\x7a\x67\x87\x0d\x4d\x47\x82\xb3\x1e\xc0\xa5\x01\xc3\x02\x6b\x14\x82\x09\xee\x58\xa8\x33\xfe\xfa\xfe\x71\xfd\x7c\xfd\xfe\x7a\x03\xd5\xf2\xf8\x74\x6e\x39\x5d\x4e\xdc\xcd\xee\x29\xb7\xa1\xf8\x97\x9e\x21\x80\xc3\x85\xe1\x4e\xb0\x31\x4b\xf5\x0a\x85\x9a\x3e\x32\x25\xab\x5a\xde\xdf\x4e\x2f\x39\x5b\x03\xf3\xcc\xbd\x59\x5d\x1b\x7f\xf7\x2b\x04\x58\x81\x69\xe6\xad\xc7\x5f\xa7\xed\xd5\x78\x4e\x12\xb1\x92\xf9\x8f\x8e\x91\x46\xa6\xe7\x29\x3e\xf8\xc2\xd9\x9a\x47\x5f\xa8\x52\xa8\x73\x2e\x7e\x02\x00\x00\xff\xff\x3c\x97\x24\x0e\xa5\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 421, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x4f\x8f\xdc\xb6\x15\xbf\xcf\xa7\x78\xd1\x65\x77\xd1\x95\xb4\x7f\x80\xa2\xf5\x4a\x13\xf8\x1f\x12\x03\x75\x1c\xd8\x5b\xa0\x85\x61\x18\x6f\xa4\x37\x12\x77\x24\x52\x25\x39\x3b\x3b\x99\x2c\xd0\x4b\x8b\xa2\xb9\xf7\xee\x4b\x81\x02\xb9\xe4\x60\x20\x40\x6f\xfd\x2c\x09\x02\x7f\x8b\x82\xa4\xa4\x91\x46\x9a\xcd\xda\x27\x91\xe2\xfb\xf3\xe3\xe3\xe3\xef\x91\x8c\x3e\x7b\xf2\xe2\xf1\xe5\x9f\xbf\x7e\x0a\xb9\x2e\x8b\xe9\x24\x32\x1f\x28\x90\x67\xb1\x47\xdc\x9b\x4e\x26\x51\x4e\x98\x4e\x27\x00\x51\x49\x1a\x21\xc9\x51\x2a\xd2\xb1\xb7\xd4\x73\xff\x77\xde\x76\x80\x63\x49\xb1\xf7\x27\xff\x8f\x0f\xfd\xc7\xa2\xac\x50\xb3\x59\x41\x1e\x24\x82\x6b\xe2\x3a\xf6\x9e\x3d\x8d\x29\xcd\x68\xa0\x81\x4b\x9d\x0b\xe9\x7e\x6b\xa6\x0b\x9a\x6e\x36\x10\x5c\x9a\x16\xdc\xde\x46\xa1\xfb\x37\x99\xec\xa8\xa5\xa4\x12\xc9\x2a\xcd\x04\xef\x38\x79\x08\x8f\x0a\x91\xc1\xd7\x62\x45\x92\x52\x78\xb4\x86\x2f\xe9\x46\x0c\x7c\x2e\x68\xbd\x12\x32\x55\x1d\xcd\x8e\x4c\xfb\x6f\xc5\x52\x9d\xc7\x29\x5d\xb3\x84\x7c\xdb\x39\x06\xc6\x99\x66\x58\xf8\x2a\xc1\x82\xe2\xd3\xe0\xe4\x18\x4a\xbc\x61\xe5\xb2\xec\xfe\x5a\x2a\x92\xb6\x8f\xb3\x82\xe2\x13\xaf\xf6\x7b\xcd\x68\x55\x09\xa9\xc7\x9c\xad\x49\x35\x62\x58\x55\x05\xf9\xa5\x98\xb1\x82\xfc\x15\xcd\x7c\xac\x2a\x3f\xc1\xca\x18\x1b\x53\x9d\x15\x98\x2c\xee\x54\x56\x1a\xf5\x52\xf9\x33\x94\xbe\xd2\xeb\x71\x2b\x9a\x0a\xaa\x72\xc1\x29\xe6\xa2\x31\x36\x17\xb2\x44\xed\xa7\xa4\x29\xb1\xa1\xde\x8d\xa4\x24\x9e\x92\x24\xd9\x89\xe4\x8a\x66\x0b\x56\x4f\xb1\x60\x7c\x01\x92\x8a\xd8\xc3\x42\x93\xe4\xa8\xc9\x03\xbd\xae\x6a\x9c\x2c\x41\x63\x35\x44\x2d\xca\xdf\xdc\x94\x85\x07\x76\xb5\x63\xef\xe1\xe5\x8b\xe7\x70\x1a\x9c\x78\x90\x4b\x9a\xc7\x9e\x95\x08\x8c\xc4\x2e\x80\x8c\x38\x49\xd4\xa2\x8b\xc0\xac\x39\xfc\x36\x38\x0f\x4e\x4c\x02\x03\x44\x9f\xf9\x3e\x24\x4a\x81\xef\xef\xa0\xb2\xc1\x50\x39\x91\x6e\x3d\x99\x50\xb1\x24\x4c\x94\x0a\x67\x42\x68\xa5\x25\x56\x41\xc9\x78\x90\x28\xb5\x3b\xa9\xbb\xd5\xe7\x82\x6b\x1f\x57\xa4\x44\x49\x9f\x66\xa1\x92\x4c\x95\x5b\x35\x33\x8d\x7b\xeb\xda\x51\x3f\x45\xb9\x70\x06\x7a\x93\x67\x69\xec\xe9\x9c\x4a\xf2\xcd\xd8\xbd\xcd\xd5\x50\xec\x66\xdc\x6c\x80\xcd\x21\xf8\x82\x69\x2c\x16\xc1\xe3\x82\x11\xd7\xcf\x9e\xc0\xed\xed\xc7\x4c\x30\xb3\xda\xf5\xa7\x9d\xe8\x66\x43\x3c\xbd\xbd\x75\x5e\x8c\x93\x87\x1c\x8b\xf5\x37\x24\x83\x47\xc8\xd2\xa5\x73\x61\x82\x61\xbb\x80\x66\x54\xb3\xa4\x5d\x5f\xc7\x0c\xa6\x09\x70\x8d\x12\xde\xe6\xa5\x86\xd8\x7d\xbe\xfd\x16\x5e\xbf\xb9\xb0\x43\x87\xf3\x25\xb7\x59\x0d\x87\x47\xb0\xb1\xbf\x9c\x7c\x5e\x42\x0c\xa9\x48\x96\x25\x71\x1d\x24\x92\x50\xd3\xd3\x82\x4c\xef\xd0\x73\xc6\xbd\xa3\x8b\x5a\x21\x2f\x03\x25\x13\x88\xc1\xcb\xb5\xae\xd4\x83\x30\xcc\xcb\x60\x66\x80\x05\x89\x28\x4d\xe7\x4a\x7d\xbe\xd9\x0c\xe6\xe0\x5d\x74\x3c\xaa\xae\xc3\x8c\x74\xed\x4d\x3d\x5a\x5f\x62\xf6\x15\x96\xb4\xf5\xfb\xfa\xe4\x4d\xa3\xa9\x82\x0a\x25\x71\xfd\x95\x48\x29\x60\x5c\x91\xd4\x8f\x68\x2e\x24\x1d\xe6\xe5\x31\xa8\x1a\xe2\xed\xd1\xa1\x6d\x45\xe1\x36\x2e\xfb\x23\xfc\x85\x10\x59\x41\xdb\x10\xbb\x3e\x68\xcc\xe0\x30\xd3\x98\x05\x57\xea\xa8\x1f\x67\x40\xb5\xe6\x09\x28\x99\xc4\x6d\x08\x56\xab\x55\x90\x59\x4d\x8d\x59\x89\x1c\x33\x92\x36\x1c\xc6\x44\x78\xa5\x3e\x67\x69\xdc\x8d\x49\xe3\xd5\x9b\x76\x51\xf6\x16\x72\xc5\x78\x2a\x56\x41\x8a\x1a\xff\x80\x6b\x92\x10\x0f\x7f\x75\x16\xb7\x5d\x5b\xe3\xd1\xac\x2f\xb4\x62\x41\xb5\x54\xf9\x21\xca\xcc\x86\x5b\x1d\x5d\xc0\xad\x55\xb1\x92\x07\x57\xea\xe0\x18\x38\xad\xe0\x09\x6a\x3a\x3c\x3a\xba\x98\x74\x06\x13\xc1\xe7\x2c\x3b\x38\x86\x83\x31\xf4\x07\xfb\xe3\x3c\x89\x42\x57\x47\x27\xd1\x4c\xa4\x6b\x3b\xbb\x94\x5d\x43\x52\xa0\x52\xb1\x67\xa8\x0b\x19\x37\x3c\x6a\xb6\xa6\xd2\x58\x57\xca\xbe\x98\x14\xab\xfa\xef\xae\x7a\xe1\xab\xd2\x3f\x07\xd3\xb8\x51\xfe\xe9\x19\x28\x96\x92\xdf\x9a\x85\x39\xa6\xf4\x8c\xbf\x64\x59\xae\x6b\x17\x66\x7c\x86\xb2\xb5\xd7\xb7\x78\x4d\x52\xb3\x04\x0b\x5f\xd3\x8d\x06\xc5\x34\xf9\x96\x9a\x3b\xe2\x00\x51\x7e\xde\xc8\x6f\x25\x7c\x55\x62\x61\x98\x1c\x67\x8c\xa7\x74\x13\x7b\xfe\xa9\x37\x8d\xb0\x91\xc4\xda\x50\xc3\x06\xde\xb6\xde\x9f\xd9\x82\x8f\xd3\x28\xcc\xcf\xfb\x7e\x4e\x47\xfc\x14\x28\x33\xfa\x24\x3f\x5b\x37\xa7\xd3\xc9\x76\xfa\x61\xca\xae\xa7\xd1\x4c\xb6\x31\x60\xca\x9c\x61\xfc\x22\x83\xa6\x59\xa6\x6d\x53\x95\x7b\x42\xd7\x85\xc8\xf8\x42\x35\xf1\xd6\xe4\x73\xbc\xee\x07\x70\x59\x74\xbb\x96\x38\xfb\x3f\xfa\xa6\x4d\x0a\x35\x39\xd2\xb4\xa5\x30\x05\x93\xe3\x35\xcb\xb0\x2d\xd1\x3b\x26\xda\xa0\x00\x5c\x29\xdf\x11\x3f\xba\xed\xd1\xed\x34\xb1\xba\xc2\x6b\x74\x39\xfc\xe0\xc2\x9b\x46\xac\xd1\x9e\x23\xcc\xd1\x57\x4b\xee\x0b\xb3\x51\xd9\xd4\x44\x71\x17\xae\x8d\x62\x7f\x52\xe1\xee\xac\xcc\x34\x23\xdc\xae\xcc\x87\x7f\xff\xeb\xc3\xbb\xf7\x6e\x4d\xee\x96\x4d\x50\x53\x26\x24\x23\xe5\x4d\x7f\xfe\xc7\xdf\x7f\xf9\xe1\xbf\x7b\xb4\x0c\x77\x6d\x36\x20\x91\x67\x04\xc1\xe3\x56\xcd\x15\xa8\x3d\xe6\x5d\x8e\xb4\xe9\xb1\x6b\xb4\xde\xcd\x96\xfe\x86\xde\xa2\xa2\x0d\x94\x12\x89\xb7\xb5\xda\x90\x62\xc6\x74\xbe\x9c\x59\x1a\x2c\x05\xad\x97\x68\x92\x57\x66\xe6\x30\xfd\x76\x56\x20\x5f\xd4\x85\x98\x0b\x51\x99\x53\x0d\x70\x21\x69\x4e\xd2\x1c\xaf\x06\x6b\x8a\x92\xa1\x5f\xe0\xcc\x28\x7c\x61\x0d\x0f\x57\x2a\xab\xff\x43\xb3\x56\x03\x48\x7a\xc5\xb4\xae\xa9\xf9\xe9\xb5\x48\x9f\x3b\x5c\x03\x6f\xf7\xc6\xd9\xc3\x75\xe9\xac\x0f\x81\xe9\x66\xa0\x83\x6c\xe0\x73\x8b\xf4\x41\x58\x07\xcc\xe2\x6c\x8f\x82\x9f\x88\xea\xe5\xab\x57\x06\xd1\xc0\x1f\xf4\x31\x4a\x7b\x68\x6a\xf1\x99\x64\xa8\xeb\xde\x36\xaf\xfb\xdb\xb7\xc7\x9f\xbf\xc2\x1d\xd0\xf0\x81\x3f\x17\xc2\xc5\x68\x4b\x3c\x3b\x63\xfe\x4c\xee\x6c\xea\xc8\x0d\x0c\xf6\x5e\x35\xfd\xdf\x7f\xe0\xec\xe4\xec\xdc\x6c\xf9\xdd\xe8\xd4\x29\xee\xa2\xe4\xd5\xb3\xaa\x46\x6c\xec\x57\x1e\xc9\xe4\x9c\x52\xc1\x33\x95\x2f\xc3\x4c\xf8\x25\xca\x45\x2a\x56\xdc\x9f\x09\xb1\x68\x3d\x3d\x21\xc5\x32\x3e\xc2\x15\x00\xb3\xf5\xa7\x39\x6b\x6d\x7f\xf9\xe4\xd5\xe8\x44\xa2\x70\x18\xa2\x1d\x6a\xea\x75\xeb\x8e\x3b\xda\xee\x2e\x66\x5d\x5e\x7f\xdf\x29\xaf\x25\x32\x3e\x28\xaf\x97\xa2\x72\xdc\xdc\x1f\xdd\x53\x27\x70\xa9\x45\x65\x0e\x46\xec\x1b\x7a\x6b\x1a\x6f\xc9\x9d\xfa\xbc\x7d\x49\x55\x5f\x70\xbc\x31\xf6\x79\x69\x2f\x62\x86\xce\x21\x59\x4a\x73\x2a\x04\x4d\x65\x55\xa0\x26\xc8\x49\xd2\x4e\xee\xda\xf3\xfb\x9a\x51\x91\x82\x3b\x06\xee\x98\xeb\xba\xad\x30\x63\xdc\xd6\x16\xe0\x76\x8d\x33\x66\x56\x58\x6b\x51\x0e\x8a\x4d\x54\xb5\x60\x0b\x42\x39\x67\x37\xde\xbe\x2c\xfb\xe5\xfb\xef\xe1\x14\x3e\xbc\x7b\x0f\x21\xfc\xfc\xb7\x1f\xe0\xcc\xb6\x61\x5c\x3a\x52\x15\xf2\x16\x90\x24\xa8\x30\x9b\x2d\xb5\x16\x5c\x0d\xe9\x05\x79\x66\xae\x3e\x62\x69\x77\x20\xcd\xb5\xab\x56\x26\xd5\x06\xd5\xb2\x2d\x42\x23\x7c\xd0\x67\xd9\x9f\x7e\xfc\xe7\x4f\x3f\xfe\xf5\xc3\xbb\xf7\xde\xb4\x6d\xba\xdc\x33\xd8\x1c\x42\x43\x18\xdb\x5e\x83\x8a\x9b\x33\x54\x0f\xf0\x08\x90\x51\xff\x35\x38\x93\x1d\xe1\x59\xe8\xed\xe0\xf9\x6e\x8b\xe7\xbb\x2d\x1e\xb8\x33\x1c\xd2\x1e\x01\xeb\xea\xed\xa0\x8e\x07\x7c\xb8\xa3\xcc\x0e\x19\x50\xe0\xfe\x2d\x35\x4e\x88\x37\xca\x51\x9f\xcb\x9f\x96\xfd\xba\x36\xc7\xc8\xed\x3e\xd4\x36\x28\x15\x77\x54\x84\xa9\xab\x74\xe3\xdc\x51\x4d\x2f\xcd\xa9\xe8\xa3\xa8\xe9\xd5\xb2\x64\xcf\x71\xc1\xb4\x08\x73\xba\x11\xf5\x21\x4b\xaf\x2b\x91\x49\xac\xf2\xf5\x70\x7d\xf7\x63\xbb\x6c\xb5\xec\x7a\xde\x87\x24\xcd\x85\x6b\x41\x54\x05\xa5\xa0\x8f\x71\xe5\x20\x8f\x84\x61\x48\xa0\x63\x7c\xd9\x6b\x36\x1c\xba\xbd\x19\xda\x3b\x61\x73\xdf\xbf\x52\xe1\xd5\x5f\x96\x24\xd7\xfe\x79\x70\x1a\x9c\xd8\x17\x91\x2b\x35\x7a\xe3\x1b\x28\xf6\x5f\x62\xee\xab\x55\xbb\x2b\x59\x26\x51\x93\x7f\x1a\x9c\x05\xa7\x9f\x60\x20\xc0\xaa\x22\x94\xf7\xd6\x72\xaf\x36\xf7\x95\xde\xa6\xc8\xbd\x55\x4c\x79\xd9\x11\xfe\xd5\x17\x99\x3d\xa6\xea\x97\x97\x3b\x82\xe2\x16\x39\x11\x5c\x69\x70\xd2\x10\xdb\xfb\xb1\xf3\x73\xd8\x3c\x9c\x24\xb5\xbf\x07\xf6\x6e\xbc\x03\xe2\xf6\xf6\xe0\xb8\x27\xf7\x8a\x12\x49\x7a\x44\xd6\x0d\x74\xe4\x25\x55\xa2\x27\xf7\x92\x2a\xd1\x19\x17\x2b\x4e\xb2\x27\xf0\xc2\xfc\xe9\x48\x60\x5a\x32\xfe\x00\x5e\x8f\x88\xbc\x69\x64\x58\xda\x33\xf1\x2c\xed\xe8\x5b\xbe\x55\xc6\x80\x9b\xff\xc1\x9b\xfa\x5d\xa5\x7e\x19\x70\x2a\xee\x25\xf4\xb0\x91\x39\xba\xe3\x25\xc0\xbd\x00\x4c\xa2\xd0\xbd\xb9\xff\x3f\x00\x00\xff\xff\xb6\x0a\x30\x62\x84\x17\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 6020, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"article.html":        articleHtml,
	"categories.html":     categoriesHtml,
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"article.html":    &bintree{articleHtml, map[string]*bintree{}},
	"categories.html": &bintree{categoriesHtml, map[string]*bintree{}},
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
