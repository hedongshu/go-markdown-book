// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/article.html
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/home.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _articleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x50\x70\x2c\x2a\xc9\x4c\xce\x49\xe5\x52\x50\xa8\xae\xd6\x83\x72\x6a\x6b\xb9\x6c\xf4\xc1\xf2\x80\x00\x00\x00\xff\xff\xbe\x69\x72\x77\x26\x00\x00\x00")

func articleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_articleHtml,
		"article.html",
	)
}

func articleHtml() (*asset, error) {
	bytes, err := articleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "article.html", size: 38, mode: os.FileMode(420), modTime: time.Unix(1672841755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4e\xc4\x30\x10\x45\xfb\x9c\x62\x64\xea\x8d\x2f\xe0\x75\x43\xbb\xc5\x16\x7b\x81\xd9\x64\xc8\x8e\x48\x9c\xc8\x1e\x82\xd0\xc8\x15\x3d\x88\xdb\x20\xce\xc3\xde\x03\x25\x4b\x10\x91\x52\xda\xcf\xff\xe9\x7f\xab\x46\x0c\x0d\x41\x79\xe0\x24\x39\x17\xae\xe6\x11\xaa\x16\x53\xda\x9b\xa1\x4f\xb2\xab\xfa\x20\xc8\x81\xa2\xf1\x05\x80\x1b\x56\x50\x58\x5a\x32\xde\x21\x5c\x22\x3d\xec\x8d\xc5\x28\x5c\xb5\xa4\x5a\x1e\x38\x3c\xe6\x6c\xbc\x6a\x79\x9a\x5e\xe5\xec\x2c\x7a\x67\x87\x0d\x4d\x47\x82\xb3\x1e\xc0\xa5\x01\xc3\x02\x6b\x14\x82\x09\xee\x58\xa8\x33\xfe\xfa\xfe\x71\xfd\x7c\xfd\xfe\x7a\x03\xd5\xf2\xf8\x74\x6e\x39\x5d\x4e\xdc\xcd\xee\x29\xb7\xa1\xf8\x97\x9e\x21\x80\xc3\x85\xe1\x4e\xb0\x31\x4b\xf5\x0a\x85\x9a\x3e\x32\x25\xab\x5a\xde\xdf\x4e\x2f\x39\x5b\x03\xf3\xcc\xbd\x59\x5d\x1b\x7f\xf7\x2b\x04\x58\x81\x69\xe6\xad\xc7\x5f\xa7\xed\xd5\x78\x4e\x12\xb1\x92\xf9\x8f\x8e\x91\x46\xa6\xe7\x29\x3e\xf8\xc2\xd9\x9a\x47\x5f\xa8\x52\xa8\x73\x2e\x7e\x02\x00\x00\xff\xff\x3c\x97\x24\x0e\xa5\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 421, mode: os.FileMode(420), modTime: time.Unix(1672904789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4f\x6f\xdc\xb8\x15\xbf\xcf\xa7\x78\xab\x4b\xc6\xa8\x29\x79\x6c\x60\xd1\xae\xa5\x59\xc4\x49\x90\x0d\xd0\x64\x83\xc4\x05\x5a\x2c\x16\xc1\x93\xf4\x46\xa2\x47\x22\x55\x92\x9a\x3f\x3b\x6b\xa0\x97\xa2\x40\xf7\x5e\xf4\xd8\xf4\x50\xa0\xc0\x5e\x7a\x08\xb0\xe7\x7e\x96\x6d\x0b\x7f\x8b\x82\xa2\x66\x46\x33\x23\x3b\x71\x0e\xf1\xc1\xc3\x7f\xef\xfd\x7e\x7c\x7c\xfc\x91\x54\xf8\xd9\xe3\xaf\x1f\x5d\xfe\xee\xe5\x13\xc8\x4d\x59\x8c\x07\xa1\xfd\x81\x02\x45\x16\x79\x24\xbc\xf1\x60\x10\xe6\x84\xe9\x78\x00\x10\x96\x64\x10\x92\x1c\x95\x26\x13\x79\xb5\x99\xb0\x5f\x7a\xdb\x0e\x81\x25\x45\xde\x6f\xd9\x6f\x1e\xb2\x47\xb2\xac\xd0\xf0\xb8\x20\x0f\x12\x29\x0c\x09\x13\x79\xcf\x9e\x44\x94\x66\x74\x60\x81\xb5\xc9\xa5\x72\xcd\x86\x9b\x82\xc6\xab\x15\xf8\x97\xb6\x04\xd7\xd7\x61\xe0\xda\x06\x83\x3d\xb3\x94\x74\xa2\x78\x65\xb8\x14\x1d\x90\x87\x70\x51\xc8\x0c\x5e\xca\x39\x29\x4a\xe1\x62\x09\x5f\xd1\x42\x1e\x60\x4e\x69\x39\x97\x2a\xd5\x1d\xcb\xce\x98\x4d\xdb\x9c\xa7\x26\x8f\x52\x9a\xf1\x84\x58\x53\x39\x06\x2e\xb8\xe1\x58\x30\x9d\x60\x41\xd1\xc8\x3f\x39\x86\x12\x17\xbc\xac\xcb\x6e\x53\xad\x49\x35\x75\x8c\x0b\x8a\x4e\xbc\x16\x77\xc6\x69\x5e\x49\x65\xfa\xc0\x96\xa4\xd7\xc3\xb0\xaa\x0a\x62\xa5\x8c\x79\x41\x6c\x4e\x31\xc3\xaa\x62\x09\x56\xd6\x59\x9f\x69\x5c\x60\x32\xbd\xd3\x58\x1b\x34\xb5\x66\x31\x2a\xa6\xcd\xb2\xdf\x8b\xa1\x82\xaa\x5c\x0a\x8a\x84\x5c\x3b\x9b\x48\x55\xa2\x61\x29\x19\x4a\x9a\x50\xef\x47\x52\x91\x48\x49\x91\xea\x44\x72\x4e\xf1\x94\xb7\x53\x2c\xb8\x98\x82\xa2\x22\xf2\x1a\x58\x9d\x13\x19\x0f\x72\x45\x93\xc8\x0b\x2c\x29\x9e\x04\x89\xd6\x41\x2c\xa5\xd1\x46\x61\xe5\x97\x5c\xf8\x89\xd6\xf7\x33\x9f\x48\x61\x18\xce\x49\xcb\x92\x3e\xce\x43\xd3\xdb\x67\x86\x85\x21\x25\xd0\x90\x07\x66\x59\xb5\xf1\xe5\x09\xda\x68\x04\x68\x64\xf9\x8b\x45\x59\x78\xd0\x64\x69\xe4\x3d\xbc\xfc\xfa\x39\x8c\xfc\x93\x0d\x84\x1d\xe1\xdb\x11\xfb\x81\xcb\x48\x90\x42\x23\xbb\x91\xb3\xb9\x0a\x9f\xfb\x67\xfe\xc9\xfd\xc8\x57\x8a\xeb\x92\x95\x68\x48\xd9\xd4\x4c\x51\x4d\x9b\xa9\xb4\x8c\x0d\x2d\x4c\xe0\xa6\x66\x77\xd1\x6a\x05\x7c\x02\xfe\x53\x6e\xb0\x98\xfa\x8f\x0a\x4e\xc2\x3c\x7b\x0c\xd7\xd7\xf7\x81\xcc\x1a\xeb\xf6\x67\x13\xb7\xd5\x8a\x44\x7a\x7d\xed\x50\x2c\xc8\x43\x81\xc5\xf2\x3b\x52\xfe\x05\xf2\xb4\x76\x10\x9f\x31\x06\x4d\x15\xd0\xf6\x1a\x9e\x68\x60\xac\x99\xb0\xdb\xd2\xb6\x08\x30\x43\x05\x6f\xf2\xd2\x40\xe4\x7e\xbe\xff\x1e\xbe\xf9\xf6\xbc\xe9\x1a\x4e\x6a\xd1\xa4\x23\x0c\x8f\x60\xd5\x34\xb9\xf1\x79\x09\x11\xa4\x32\xa9\x4b\x12\xc6\x4f\x14\xa1\xa1\x27\x05\xd9\xda\xd0\x73\xce\xbd\xa3\xf3\xd6\x20\x2f\x7d\xad\x12\x88\xc0\xcb\x8d\xa9\xf4\x17\x41\x90\x97\x7e\x6c\x89\xf9\x89\x2c\x6d\xe5\x4a\x7f\xb9\x5a\x1d\xcc\xc1\x3b\xef\x20\xea\x2e\x60\x46\xa6\x45\xd3\x17\xcb\x4b\xcc\x5e\x60\x49\x5b\xdc\x6f\x4e\xbe\x5d\x5b\x6a\xbf\x42\x45\xc2\xbc\x90\x29\xf9\x5c\x68\x52\xe6\x82\x26\x52\xd1\x30\x2f\x8f\x41\xb7\x14\xaf\x8f\x86\x4d\x29\x0c\xb6\x71\xb9\x3d\xc2\x4f\xa5\xcc\x0a\xda\x86\xd8\xd5\xc1\x60\x06\xc3\xcc\x60\xe6\x5f\xe9\xa3\xdd\x38\x03\xea\xa5\x48\x40\xab\x24\xda\x84\x60\x3e\x9f\xfb\x59\x63\x69\x30\x2b\x51\x60\x46\xaa\x09\x87\x75\x11\x5c\xe9\x2f\x79\x1a\x75\x63\xb2\x46\xf5\xc6\x5d\x96\x3b\x0b\x39\xe7\x22\x95\x73\x3f\x45\x83\xbf\xc6\x25\x29\x88\x0e\x9b\x3a\x8b\xbb\x59\x5b\x8b\x68\xd7\x17\x36\xc3\xfc\xaa\xd6\xf9\x10\x55\xd6\x84\x5b\x1f\x9d\xc3\x75\x63\xd2\x8c\x7c\x70\xa5\x1f\x1c\x83\xa0\x39\x3c\x46\x43\xc3\xa3\xa3\xf3\x41\xa7\x33\x91\x62\xc2\xb3\x07\xc7\xf0\xa0\x8f\xfd\x83\xdb\xe3\x3c\x08\x03\x77\x00\x0e\xc2\x58\xa6\xcb\x66\x76\x29\x9f\x41\x52\xa0\xd6\x91\x67\xf7\x2e\x72\x41\xee\x00\xdb\xed\x53\x72\xde\xb6\xee\xdb\x14\x4c\x97\xec\x0c\x6c\x61\xa1\xd9\xe8\x14\x34\x4f\x89\x6d\x7c\xc1\x04\x53\x7a\x26\x5e\xf1\x2c\x37\x1e\xf0\x34\xf2\x9a\xfe\x18\xd5\xc6\xdf\xae\xc7\x19\x29\xc3\x13\x2c\x98\xdd\xea\xa0\xb9\x21\xd6\x08\x52\x67\x38\x40\x98\x9f\xad\xc7\x6f\x47\x30\x5d\x62\x61\xf5\x0b\x63\x2e\x52\x5a\x44\x1e\x1b\x79\xe3\x10\xd7\x23\xb1\x75\xb4\x96\x00\x6f\xef\x74\xc6\x71\x18\xe4\x67\xbb\x30\xa3\x1e\x98\x02\x55\x46\xf7\x81\xf9\xef\xdf\xfe\x74\xf3\xf7\xbf\xba\xff\x2d\xcc\x68\x07\xe6\x33\xc6\xf2\xcf\x87\x52\x24\x05\x4f\xa6\x91\x67\x14\xcf\x32\x52\xaf\xb9\xa1\x17\x38\x1b\x1e\x79\x47\x70\xe9\x9a\x5c\xce\xb7\x56\x41\xca\x67\xe3\x30\x56\x9b\xc8\x71\x6d\xef\x29\xac\xc8\x60\x5d\x2c\xd3\x4d\x51\x97\xb7\x04\xbc\x3b\x33\x2e\xa6\x7a\xbd\x4a\x86\x98\xc0\xd9\x6e\xd8\xeb\x62\x3c\xe8\xd4\x1b\x91\xed\x4c\x3d\xa9\x95\x95\x82\xce\xd4\x6f\xfe\xf1\x97\x9b\xb7\xef\xdc\xa4\x0b\x3e\xde\xb1\x5d\xad\x40\xa1\xc8\x08\xfc\x47\x68\x28\x93\x8a\x93\x76\xd2\x7d\xe0\xdf\xf9\x73\x0b\xb6\x59\xab\x43\x7f\x2e\xcf\xf7\xec\x37\xf3\x94\x89\xb7\xf5\xb5\x16\x89\x8c\x9b\xbc\x8e\x1b\x59\x28\x25\x2d\x6b\xb4\x0b\xab\x32\x7b\x2b\x7c\x13\x17\x28\xa6\x9e\x3b\x42\x84\x94\x95\x3d\xe6\x40\x48\x45\x13\x52\xf6\x9e\xb0\x83\x64\xff\x50\x71\x64\x05\xc6\xd6\xe0\x69\xe3\xd8\x1b\x87\x1b\x02\x13\x84\x09\xb2\xac\x6d\x87\x30\xe0\xe3\x66\x22\xfb\x94\xcc\x9c\x1b\xd3\x4a\xd5\x93\x99\x4c\x9f\x3b\x5e\x07\x68\x1f\xcc\x73\x87\xd7\xa5\xf3\x7e\x48\xcc\xac\x3b\x3a\xcc\x0e\x30\xb7\x4c\xbf\x08\xda\x80\x35\x3c\x37\x77\x83\x8f\x64\xf5\xea\xf5\x6b\xcb\xe8\x00\x0f\x76\x39\x2a\x7b\x38\x6f\xf9\xed\xa5\x40\x18\xd8\xfc\xec\xd4\xbb\xb2\xf2\x9e\xcd\x01\xeb\x84\x67\x13\x29\x5d\x7c\xb6\x3b\x6b\xaf\x8f\xc5\xca\xdb\x4d\xbd\xd0\x75\x8c\xf7\xf8\x87\xd5\xf8\xdf\xff\x84\xd3\x93\xd3\x33\x08\xf1\x20\x32\xb7\xc4\xf2\x8e\x90\x8d\x5d\x2a\xb8\xb9\x57\x3d\x68\x97\x39\x95\x74\x37\xd6\x5e\xd2\xbf\xae\x4b\xfe\x1c\xa7\xdc\xc8\x20\xa7\x85\x64\xc6\x7a\x60\x66\x59\xc9\x4c\x61\x95\x2f\x0f\xd3\x0e\xee\xe0\x77\xb9\xb1\xb3\x1c\x21\x5e\xbe\x9f\x8b\x3d\xa5\xa7\x44\x95\x5f\x4a\xba\x1f\x98\xa3\xdd\x1b\x8c\x30\x38\x5c\x10\xa7\x97\x83\xde\x6a\x5b\x19\x0c\x06\xb7\x9f\x71\xbf\xea\x9c\x71\x25\x72\x71\x70\xc6\x5d\xca\xca\x69\xe7\x6e\xef\x2d\xb2\x8b\xb5\x91\x95\xbd\x92\xf0\xef\xe8\x8d\x2d\xbc\x21\x77\xdf\xf2\x6e\x4b\xe1\xf6\x6e\xed\xed\x4b\xb0\xbd\x21\xbd\x6a\xde\x2e\x60\x72\x82\x56\x84\xc1\x50\x59\x15\x68\x08\x72\x52\x04\xdd\x93\x03\x9c\xf8\x2e\x39\x15\x29\x34\x17\x83\x1e\x8f\x5d\xe4\x0a\x33\x2e\x9a\x67\x02\x08\xc9\x4a\x54\x19\x17\x2c\x96\xc6\xc8\xd2\x3b\xcc\xc2\x0d\xdf\x82\x50\x4d\xf8\xc2\xbb\x25\x59\xe1\x7f\x3f\xfe\x08\x23\xb8\x79\xfb\x0e\x02\xf8\xcf\x1f\xff\x05\xa7\x4d\x19\xfa\x47\x87\xba\x42\xb1\x21\xa4\x08\x2a\xcc\xe2\xda\x18\x29\xf4\xa1\x96\xa1\xc8\x0a\x62\xa9\xac\x9b\x2d\x4f\x13\x63\x39\xf0\xb1\xcd\x46\x25\xed\xe3\x46\xe0\x8c\x67\xe8\x5e\xdc\xeb\xc3\xaa\x27\xf9\x76\x25\xfd\xe7\x9f\xfe\xfc\xf3\x4f\x7f\xb8\x79\xfb\xce\x1b\x6f\x8a\x2e\xfd\x2c\x37\xc7\xd0\xaa\xd3\xb6\xb6\x66\x25\xec\x5d\x66\x87\x70\x0f\x91\x5e\xfc\x96\x9c\x4d\x90\xe0\x34\xf0\xf6\xf8\xfc\xb0\xe5\xf3\xc3\x96\x0f\xdc\x19\x0e\xd5\x5c\xc5\xc6\x4e\x44\x1d\xd5\xfe\x80\x1f\x6e\x2a\xbb\x49\xf6\x32\xe9\xae\x5d\xd5\xaf\xc0\x0b\xed\xb4\xd6\xe5\xcf\x46\x6e\xbb\x3e\xfb\xd4\xf4\x53\x6a\xe9\x27\x52\xd2\x4f\xa8\xa3\x1f\xa7\xa2\xd5\xf8\xa5\x92\x75\x5a\x2c\xa1\xaa\xe3\x82\xeb\x9c\x52\x98\x73\x93\xbf\x9f\x8d\x8d\x80\xcf\xe5\x5d\xf1\xff\x8a\x16\x0d\xec\x5e\x8e\x55\xbb\xd9\xb5\x9f\x0a\x7d\xb2\xbd\x53\x5c\x4b\xf9\xf6\x69\xd8\x3c\x0a\xd7\x0f\xfe\x2b\x1d\x5c\xfd\xbe\x26\xb5\x64\x67\xfe\xc8\x3f\x69\xbe\xb0\x5c\xe9\xde\x27\xdf\x81\xe1\xee\x97\x9d\x0f\xb5\x6a\xe1\x4a\x9e\x29\x34\xc4\x46\xfe\xa9\x3f\xfa\x08\x07\x3e\x56\x15\xa1\xfa\x60\xab\x6d\xe2\xed\x99\x84\x81\x7b\xfc\xd9\xd7\x60\xf3\x9d\xf4\xff\x01\x00\x00\xff\xff\x19\xc6\x58\xa5\x38\x15\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 5432, mode: os.FileMode(420), modTime: time.Unix(1672904609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"article.html":        articleHtml,
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"article.html": &bintree{articleHtml, map[string]*bintree{}},
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
