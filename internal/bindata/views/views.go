// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/article.html
// web/views/categories.html
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/home.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _articleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\xc8\x2f\x2e\xd1\x2d\x48\x4c\x4f\x55\xb2\xe3\x52\x50\xa8\xae\xd6\x73\x2c\x2a\xc9\x4c\xce\x49\xad\xad\xe5\xb2\xd1\x4f\xc9\x2c\xb3\xe3\x02\x04\x00\x00\xff\xff\x77\x93\x46\x1f\x2e\x00\x00\x00")

func articleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_articleHtml,
		"article.html",
	)
}

func articleHtml() (*asset, error) {
	bytes, err := articleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "article.html", size: 46, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _categoriesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\xaa\xdb\x30\x10\x86\xf7\x39\xc5\xe0\x7d\xac\x0b\x28\x86\x90\x6e\x0a\xa1\x14\x9a\x0b\xa8\xf6\xc4\x1e\x2a\xcb\x46\x92\x93\xc5\x20\xe8\xaa\x29\x3d\x40\x57\xdd\x94\x1e\x20\x74\xdd\xf3\xd4\xb9\x46\xb1\x62\x07\x37\x8f\x07\xef\xc1\xe3\xed\x64\xeb\x1f\xfd\xff\xcc\x37\xcc\xb4\x87\xf4\x43\xd5\x1c\xd7\x5a\x87\xb0\x90\x05\x1d\x20\xd7\xca\xb9\x55\xa2\x6c\x5e\xd1\x01\x41\x19\xaa\x95\xc7\x02\xf6\xaa\xc0\xb7\xe6\x4d\x73\x34\x49\xb6\x00\x90\xed\xa4\x6c\x1b\xe7\x97\x9e\xbc\xc6\x24\xfb\xfb\xf5\xcb\xe5\xf7\x1f\x90\xa2\x8d\x9a\x4e\x4f\x22\x4d\xce\x93\x29\x63\x29\x00\xb3\x55\xa6\x44\x48\x77\x16\x71\x6d\x3d\xe5\x1a\x5d\x08\xf1\x4e\x6a\xba\x2b\x5a\x92\xc7\x7a\xac\x04\x98\x87\x9c\x04\x43\x84\x9b\xe0\xb1\x6c\x52\x41\x65\x71\xbf\x4a\x44\xae\x3c\x96\x8d\x25\x74\x82\x39\x7d\xa7\x6a\x0c\x21\x81\x28\x5b\x25\xfd\xb7\xcf\xfd\x8f\x73\xff\xfd\xd4\xff\xfc\x95\x64\xb7\x7b\x29\x54\x36\xb6\x35\x9a\xb8\x56\x99\xc9\xa7\x50\x1e\xa1\x46\xaf\xc6\xac\xcc\x25\xfa\x4d\x45\xba\xb0\x68\x36\x4d\x67\x3c\xa4\x21\xc0\xe5\x7c\x92\x62\xa8\xbb\x35\x23\x0a\x3a\x5c\x3f\xa4\xd0\x34\x4d\x07\x4d\x11\xa7\x21\x45\xa7\xb3\xc5\x28\x62\x46\xed\xf0\x25\x31\x31\xa7\x9b\x69\x14\x43\x87\x4f\x84\xb6\x25\xe7\x5f\x0f\x96\xba\xae\x07\x73\xba\x25\xf3\x69\x06\x8a\x39\xdd\x0d\xa7\x10\x22\xa6\xf1\xfc\x90\xd3\x2c\xc2\xe8\x50\xe3\xcc\xff\x8e\xa4\xb2\xcb\x01\x66\x7c\xf2\x7d\xf7\x51\x93\xab\x76\x74\x5d\x80\x39\xb8\xff\xd0\x3d\x9b\x63\xfc\xfd\x2f\x00\x00\xff\xff\x36\x43\x51\x70\x7e\x03\x00\x00")

func categoriesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_categoriesHtml,
		"categories.html",
	)
}

func categoriesHtml() (*asset, error) {
	bytes, err := categoriesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.html", size: 894, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4e\xc4\x30\x10\x45\xfb\x9c\x62\x64\xea\x8d\x2f\xe0\x75\x43\xbb\xc5\x16\x7b\x81\xd9\x64\xc8\x8e\x48\x9c\xc8\x1e\x82\xd0\xc8\x15\x3d\x88\xdb\x20\xce\xc3\xde\x03\x25\x4b\x10\x91\x52\xda\xcf\xff\xe9\x7f\xab\x46\x0c\x0d\x41\x79\xe0\x24\x39\x17\xae\xe6\x11\xaa\x16\x53\xda\x9b\xa1\x4f\xb2\xab\xfa\x20\xc8\x81\xa2\xf1\x05\x80\x1b\x56\x50\x58\x5a\x32\xde\x21\x5c\x22\x3d\xec\x8d\xc5\x28\x5c\xb5\xa4\x5a\x1e\x38\x3c\xe6\x6c\xbc\x6a\x79\x9a\x5e\xe5\xec\x2c\x7a\x67\x87\x0d\x4d\x47\x82\xb3\x1e\xc0\xa5\x01\xc3\x02\x6b\x14\x82\x09\xee\x58\xa8\x33\xfe\xfa\xfe\x71\xfd\x7c\xfd\xfe\x7a\x03\xd5\xf2\xf8\x74\x6e\x39\x5d\x4e\xdc\xcd\xee\x29\xb7\xa1\xf8\x97\x9e\x21\x80\xc3\x85\xe1\x4e\xb0\x31\x4b\xf5\x0a\x85\x9a\x3e\x32\x25\xab\x5a\xde\xdf\x4e\x2f\x39\x5b\x03\xf3\xcc\xbd\x59\x5d\x1b\x7f\xf7\x2b\x04\x58\x81\x69\xe6\xad\xc7\x5f\xa7\xed\xd5\x78\x4e\x12\xb1\x92\xf9\x8f\x8e\x91\x46\xa6\xe7\x29\x3e\xf8\xc2\xd9\x9a\x47\x5f\xa8\x52\xa8\x73\x2e\x7e\x02\x00\x00\xff\xff\x3c\x97\x24\x0e\xa5\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 421, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x8b\xe4\xc8\x11\xbe\xd7\xaf\x88\xd5\xa5\xbb\x71\x4b\xd5\x0f\x30\xf6\x74\xa9\x96\x79\x31\x3b\xe0\xdd\x59\x66\xda\x60\x33\x0c\x43\x48\x8a\x92\xb2\x5b\xca\x94\x33\xb3\xba\xba\xb6\xb6\xc0\x17\x1b\xe3\xbd\xfb\x3e\x17\x83\x61\x2f\x7b\x18\x58\xf0\xcd\xbf\x65\x97\x65\xfe\x85\xc9\x4c\x49\xa5\x57\xf5\xb6\xc7\xd8\x27\xe5\x23\x1e\x5f\x46\x46\x7e\x91\xa9\xd9\x27\x4f\x5e\x3c\xbe\xfc\xfd\x97\x4f\x21\xd3\x45\x3e\x9f\xcc\xcc\x07\x72\xe4\x69\xe8\x11\xf7\xe6\x93\xc9\x2c\x23\x4c\xe6\x13\x80\x59\x41\x1a\x21\xce\x50\x2a\xd2\xa1\xb7\xd4\x0b\xff\x57\xde\x6e\x82\x63\x41\xa1\xf7\x3b\xff\xb7\x0f\xfd\xc7\xa2\x28\x51\xb3\x28\x27\x0f\x62\xc1\x35\x71\x1d\x7a\xcf\x9f\x86\x94\xa4\x34\xd0\xc0\xa5\xce\x84\x74\xc3\x9a\xe9\x9c\xe6\x9b\x0d\x04\x97\xa6\x05\xdb\xed\x6c\xea\xc6\x26\x93\x9e\x5a\x42\x2a\x96\xac\xd4\x4c\xf0\x96\x93\x87\xf0\x28\x17\x29\x7c\x29\x56\x24\x29\x81\x47\x6b\xf8\x8c\x6e\xc5\xc0\xe7\x35\xad\x57\x42\x26\xaa\xa5\xd9\x92\x69\xc6\x56\x2c\xd1\x59\x98\xd0\x0d\x8b\xc9\xb7\x9d\x63\x60\x9c\x69\x86\xb9\xaf\x62\xcc\x29\x3c\x0d\x4e\x8e\xa1\xc0\x5b\x56\x2c\x8b\xf6\xd0\x52\x91\xb4\x7d\x8c\x72\x0a\x4f\xbc\xca\xef\x0d\xa3\x55\x29\xa4\x1e\x73\xb6\x26\x55\x8b\x61\x59\xe6\xe4\x17\x22\x62\x39\xf9\x2b\x8a\x7c\x2c\x4b\x3f\xc6\xd2\x18\x1b\x53\x8d\x72\x8c\xaf\xef\x54\x56\x1a\xf5\x52\xf9\x11\x4a\x5f\xe9\xf5\xb8\x15\x4d\x39\x95\x99\xe0\x14\x72\x51\x1b\x5b\x08\x59\xa0\xf6\x13\xd2\x14\xdb\x50\xf7\x23\x29\x89\x27\x24\x49\xb6\x22\xb9\xa2\xe8\x9a\x55\x4b\xcc\x19\xbf\x06\x49\x79\xe8\x61\xae\x49\x72\xd4\xe4\x81\x5e\x97\x15\x4e\x16\xa3\xb1\x3a\x45\x2d\x8a\x5f\xdc\x16\xb9\x07\x76\xb7\x43\xef\xe1\xe5\x8b\xcf\xe1\x34\x38\xf1\x20\x93\xb4\x08\x3d\x2b\x11\x18\x89\x3e\x80\x94\x38\x49\xd4\xa2\x8d\xc0\xec\x39\xfc\x32\x38\x0f\x4e\x4c\x02\x03\xcc\x3e\xf1\x7d\x88\x95\x02\xdf\xef\xa1\xb2\xc1\x50\x19\x91\x6e\x3c\x99\x50\xb1\x78\x1a\x2b\x35\x8d\x84\xd0\x4a\x4b\x2c\x83\x82\xf1\x20\x56\xaa\xbf\xa8\xbb\xd5\x17\x82\x6b\x1f\x57\xa4\x44\x41\x1f\x67\xa1\x94\x4c\x15\x3b\x35\xb3\x8c\x7b\xeb\xda\x59\x3f\x41\x79\xed\x0c\x74\x16\xcf\x92\xd0\xd3\x19\x15\xe4\x9b\xb9\x7b\x9b\xab\xa0\xd8\xc3\xb8\xd9\x00\x5b\x40\xf0\x8c\x69\xcc\xaf\x83\xc7\x39\x23\xae\x9f\x3f\x81\xed\xf6\x3f\x59\x60\x6a\xb5\xab\x4f\xb3\xd0\xcd\x86\x78\xb2\xdd\x3a\x2f\xc6\xc9\x43\x8e\xf9\xfa\x2b\x92\xc1\x23\x64\xc9\xd2\xb9\x30\xc1\xb0\x5d\x40\x33\xab\x59\xdc\xec\xaf\x63\x06\xd3\x04\xb8\x41\x09\x6f\xb3\x42\x43\xe8\x3e\x5f\x7f\x0d\xaf\xdf\x5c\xd8\xa9\xc3\xc5\x92\xdb\xac\x86\xc3\x23\xd8\xd8\x21\x27\x9f\x15\x10\x42\x22\xe2\x65\x41\x5c\x07\xb1\x24\xd4\xf4\x34\x27\xd3\x3b\xf4\x9c\x71\xef\xe8\xa2\x52\xc8\x8a\x40\xc9\x18\x42\xf0\x32\xad\x4b\xf5\x60\x3a\xcd\x8a\x20\x32\xc0\x82\x58\x14\xa6\x73\xa5\x3e\xdd\x6c\x06\x6b\xf0\x2e\x5a\x1e\x55\xdb\x61\x4a\xba\xf2\xa6\x1e\xad\x2f\x31\xfd\x02\x0b\xda\xf9\x7d\x7d\xf2\xa6\xd6\x54\x41\x89\x92\xb8\xfe\x42\x24\x14\x30\xae\x48\xea\x47\xb4\x10\x92\x0e\xb3\xe2\x18\x54\x05\x71\x7b\x74\x68\x5b\xb3\xe9\x2e\x2e\xfb\x23\xfc\x4c\x88\x34\xa7\x5d\x88\x5d\x1f\x34\xa6\x70\x98\x6a\x4c\x83\x2b\x75\xd4\x8d\x33\xa0\x5a\xf3\x18\x94\x8c\xc3\x26\x04\xab\xd5\x2a\x48\xad\xa6\xc6\xb4\x40\x8e\x29\x49\x1b\x0e\x63\x62\x7a\xa5\x3e\x65\x49\xd8\x8e\x49\xed\xd5\x9b\xb7\x51\x76\x36\x72\xc5\x78\x22\x56\x41\x82\x1a\x7f\x83\x6b\x92\x10\x0e\x87\x5a\x9b\xdb\xec\xad\xf1\x68\xf6\x17\x1a\xb1\xa0\x5c\xaa\xec\x10\x65\x6a\xc3\xad\x8e\x2e\x60\x6b\x55\xac\xe4\xc1\x95\x3a\x38\x06\x4e\x2b\x78\x82\x9a\x0e\x8f\x8e\x2e\x26\xad\xc9\x58\xf0\x05\x4b\x0f\x8e\xe1\x60\x0c\xfd\xc1\xfe\x38\x4f\x66\x53\x57\x47\x27\xb3\x48\x24\x6b\xbb\xba\x84\xdd\x40\x9c\xa3\x52\xa1\x67\xa8\x0b\x19\x37\x3c\x6a\x8e\xa6\xd2\x58\x55\xca\xae\x98\x14\xab\x6a\xb4\xaf\x9e\xfb\xaa\xf0\xcf\xc1\x34\x6e\x95\x7f\x7a\x06\x8a\x25\xe4\x37\x66\x61\x81\x09\x3d\xe7\x2f\x59\x9a\xe9\xca\x85\x99\x8f\x50\x36\xf6\xba\x16\x6f\x48\x6a\x16\x63\xee\x6b\xba\xd5\xa0\x98\x26\xdf\x52\x73\x4b\x1c\x60\x96\x9d\xd7\xf2\x3b\x09\x5f\x15\x98\x1b\x26\xc7\x88\xf1\x84\x6e\x43\xcf\x3f\xf5\xe6\x33\xac\x25\xb1\x32\x54\xb3\x81\xb7\xab\xf7\x67\xb6\xe0\xe3\x7c\x36\xcd\xce\xbb\x7e\x4e\x47\xfc\xe4\x28\x53\xfa\x28\x3f\x3b\x37\xa7\xf3\xc9\x6e\xf9\xd3\x84\xdd\xcc\x67\x91\x6c\x62\xc0\x94\xb9\xc3\xf8\x79\x0a\x75\xb3\x48\x9a\xa6\x2a\xf6\x84\xae\x0d\x91\xf1\x6b\x55\xc7\x5b\x93\xcf\xf1\xa6\x1b\xc0\x65\xde\xee\x5a\xe2\xec\x0e\x98\x43\x50\x22\xaf\x6d\x9b\x1c\xaa\x93\xa4\x6e\x4b\x61\x2a\x26\xc7\x1b\x96\x62\x53\xa3\x7b\x36\x9a\xa8\x00\x5c\x29\xdf\x31\x3f\xba\xf3\xd1\xee\xd4\xc1\xba\xc2\x1b\x74\x49\xfc\xe0\xc2\x9b\xcf\x58\xad\xbd\x40\x58\xa0\xaf\x96\xdc\x17\xe6\xa4\xb2\xb9\x09\x63\x1f\xef\xd4\x00\xee\x2d\x6b\xda\x5f\x97\x59\xe8\x0c\x77\x7b\xf3\xe1\xef\x7f\xfb\xf0\xee\xbd\xdb\x95\xbb\x65\x63\xd4\x94\x0a\xc9\x48\x79\xf3\x1f\xff\xf2\xe7\x9f\xbe\xfb\xe7\x1e\x2d\xc3\x5e\x9b\x0d\x48\xe4\x29\x41\xf0\xb8\x51\x73\x25\x6a\x8f\x79\x97\x25\x4d\x82\xf4\x8d\x56\xe7\xd9\x12\xe0\xd0\xdb\x2c\x6f\x22\xa5\x44\xec\xed\xac\xd6\xb4\x98\x32\x9d\x2d\x23\x4b\x84\x85\xa0\xf5\x12\x4d\xfa\xca\xd4\x5c\xa7\xdf\x46\x39\xf2\xeb\xaa\x14\x73\x21\x4a\x73\xaf\x01\x2e\x24\x2d\x48\x9a\x0b\xd6\x60\x53\x51\x32\xf4\x73\x8c\x8c\xc2\x33\x6b\x78\xb8\x55\x69\x35\x0e\xf5\x66\x0d\x20\xe9\x15\xd3\xba\x22\xe7\xa7\x37\x22\xf9\xdc\xe1\x1a\x78\xbb\x37\xce\x0e\xae\x4b\x67\x7d\x08\x4c\xd7\x13\x2d\x64\x03\x9f\x3b\xa4\x0f\xa6\x55\xc0\x2c\xce\xe6\x32\xf8\x91\xa8\x5e\xbe\x7a\x65\x10\x0d\xfc\x41\x17\xa3\xb4\xd7\xa6\x06\x9f\x49\x86\xaa\xf2\xed\xf2\xba\x7b\x80\x3b\x0c\xfa\x33\xec\x01\x35\x23\xf8\x0b\x21\x5c\x8c\x76\xd4\xd3\x9b\xf3\x23\xd9\x3b\xd5\x33\x37\x31\x38\x7c\xe5\xfc\x5f\xff\x80\xb3\x93\xb3\x73\x73\xe6\xfb\xd1\xa9\x52\xdc\x45\xc9\xab\x56\x55\x8e\xd8\xd8\xaf\x3c\x92\xc9\x19\x25\x82\xa7\x2a\x5b\x4e\x53\xe1\x17\x28\xaf\x13\xb1\xe2\x7e\x24\xc4\x75\xe3\xe9\x09\x29\x96\xf2\x11\xb2\x00\x88\xd6\x1f\xe7\xac\xb1\xfd\xd9\x93\x57\xa3\x0b\x99\x4d\x87\x21\x72\x14\x3f\x19\xed\x56\x1d\x77\xb9\xed\x6f\x66\x55\x60\x7f\xdd\x2a\xb0\x05\x32\x3e\x28\xb0\x97\xa2\x74\xe4\xdc\x9d\xdd\x53\x29\x70\xa9\x45\x69\xae\x46\xec\x2b\x7a\x6b\x1a\x6f\xc9\xdd\xfb\xbc\x7d\x49\x55\x3d\x71\xbc\x31\xf6\x79\x69\x9f\x62\x86\xcf\x21\x5e\x4a\x73\x2f\x04\x4d\x45\x99\xa3\x26\xc8\x48\x52\x2f\x77\xed\x0d\x7e\xcd\x28\x4f\xc0\x5d\x04\x7b\xe6\xda\x6e\x4b\x4c\x19\xb7\xc5\x05\xb8\xdd\xe3\x94\x99\x1d\xd6\x5a\x14\x83\x6a\x33\x2b\x1b\xb0\x39\xa1\x5c\xb0\x5b\x6f\x5f\x96\xfd\xf4\xed\xb7\x70\x0a\x1f\xde\xbd\x87\x29\xfc\xf8\xa7\xef\xe0\xcc\xb6\x61\x5c\xba\x53\x07\x4b\x49\x50\x62\x1a\x2d\xb5\x16\x5c\x0d\xe9\x05\x79\x6a\x1e\x3f\x62\x69\x4f\x20\x2d\xb4\x2b\x57\x26\xd5\x06\xe5\xb2\x29\x42\x23\x7c\xd0\x65\xd9\x1f\xbe\xff\xeb\x0f\xdf\xff\xf1\xc3\xbb\xf7\xde\xbc\x69\xba\xdc\xb3\x25\xcf\x22\x9c\x43\xbb\x57\xa3\xe2\xe6\x16\xd5\x01\x3c\x02\x64\xd4\x7f\x05\xce\x64\xc7\xf4\x6c\xea\xf5\xf0\x7c\xb3\xc3\xf3\xcd\x0e\x0f\xdc\x19\x0e\x69\x2f\x81\x55\xf9\x76\x50\xc7\x03\x3e\x3c\x51\xe6\x84\x0c\x28\x70\xff\x91\x1a\x27\xc4\x5b\xe5\xa8\xcf\xe5\x4f\xc3\x7e\x6d\x9b\x63\xe4\xf6\xdf\x53\xdb\xff\x93\xd8\xfe\x47\xb4\x36\x24\xb5\x31\x0e\xeb\x34\x6b\x5e\xdb\xbd\xd7\xec\x4b\xad\x7e\x85\x5f\xa9\xe9\xd5\x1f\x96\x24\xd7\xfe\x79\x70\x1a\x9c\xd8\xff\x14\x57\x6a\xf4\x1d\x36\x50\xec\xfe\x1f\xb9\xaf\x56\xe5\xae\x60\xa9\x44\x4d\xfe\x69\x70\x16\x9c\x7e\x84\x81\x00\xcb\x92\x50\xde\x5b\xcb\xfd\x4b\xb9\xaf\xb4\x5e\x97\x22\x95\x58\x66\xeb\x7b\xab\x18\xca\xef\x09\xff\xec\x7f\x92\x3d\xa6\xaa\xff\x21\x77\x04\xc5\x6d\x72\x2c\xb8\xd2\xe0\xa4\x21\xb4\xaf\x56\xe7\xe7\xb0\xfe\x9d\x11\x57\xfe\x1e\xd8\x17\x6b\x0f\xc4\x76\x7b\x70\xdc\x91\x7b\x45\xb1\x24\x3d\x22\xeb\x26\x5a\xf2\x92\x4a\xd1\x91\x7b\x49\xa5\x68\xcd\x8b\x15\x27\xd9\x11\x78\x61\x46\x5a\x12\x98\x14\x8c\x3f\x80\xd7\x23\x22\x6f\x6a\x19\x96\x74\x4c\x3c\x4f\x5a\xfa\x96\x03\x95\x31\xe0\xd6\x7f\xf0\xa6\xfa\xdb\x51\xbd\xd7\x9d\x8a\xfb\x3f\x79\x58\xcb\x1c\xdd\xf1\x3e\x77\xef\x72\xf3\x50\xb7\x7f\xc2\xff\x1d\x00\x00\xff\xff\x83\x83\x64\xf7\x1a\x17\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 5914, mode: os.FileMode(420), modTime: time.Unix(1672976295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"article.html":        articleHtml,
	"categories.html":     categoriesHtml,
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"article.html":    &bintree{articleHtml, map[string]*bintree{}},
	"categories.html": &bintree{categoriesHtml, map[string]*bintree{}},
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
