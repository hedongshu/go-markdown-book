// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/article.html
// web/views/categories.html
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/home.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _articleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\xc8\x2f\x2e\xd1\x2d\x48\x4c\x4f\x55\xb2\xe3\x52\x50\xa8\xae\xd6\x73\x2c\x2a\xc9\x4c\xce\x49\xad\xad\xe5\xb2\xd1\x4f\xc9\x2c\xb3\xe3\x02\x04\x00\x00\xff\xff\x77\x93\x46\x1f\x2e\x00\x00\x00")

func articleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_articleHtml,
		"article.html",
	)
}

func articleHtml() (*asset, error) {
	bytes, err := articleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "article.html", size: 46, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _categoriesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\xaa\xdb\x30\x10\x86\xf7\x39\xc5\xe0\x7d\xac\x0b\x28\x86\x90\x6e\x0a\xa1\x14\x9a\x0b\xa8\xf6\xc4\x1e\x2a\xcb\x46\x92\x93\xc5\x20\xe8\xaa\x29\x3d\x40\x57\xdd\x94\x1e\x20\x74\xdd\xf3\xd4\xb9\x46\xb1\x62\x07\x37\x8f\x07\xef\xc1\xe3\xed\x64\xeb\x1f\xfd\xff\xcc\x37\xcc\xb4\x87\xf4\x43\xd5\x1c\xd7\x5a\x87\xb0\x90\x05\x1d\x20\xd7\xca\xb9\x55\xa2\x6c\x5e\xd1\x01\x41\x19\xaa\x95\xc7\x02\xf6\xaa\xc0\xb7\xe6\x4d\x73\x34\x49\xb6\x00\x90\xed\xa4\x6c\x1b\xe7\x97\x9e\xbc\xc6\x24\xfb\xfb\xf5\xcb\xe5\xf7\x1f\x90\xa2\x8d\x9a\x4e\x4f\x22\x4d\xce\x93\x29\x63\x29\x00\xb3\x55\xa6\x44\x48\x77\x16\x71\x6d\x3d\xe5\x1a\x5d\x08\xf1\x4e\x6a\xba\x2b\x5a\x92\xc7\x7a\xac\x04\x98\x87\x9c\x04\x43\x84\x9b\xe0\xb1\x6c\x52\x41\x65\x71\xbf\x4a\x44\xae\x3c\x96\x8d\x25\x74\x82\x39\x7d\xa7\x6a\x0c\x21\x81\x28\x5b\x25\xfd\xb7\xcf\xfd\x8f\x73\xff\xfd\xd4\xff\xfc\x95\x64\xb7\x7b\x29\x54\x36\xb6\x35\x9a\xb8\x56\x99\xc9\xa7\x50\x1e\xa1\x46\xaf\xc6\xac\xcc\x25\xfa\x4d\x45\xba\xb0\x68\x36\x4d\x67\x3c\xa4\x21\xc0\xe5\x7c\x92\x62\xa8\xbb\x35\x23\x0a\x3a\x5c\x3f\xa4\xd0\x34\x4d\x07\x4d\x11\xa7\x21\x45\xa7\xb3\xc5\x28\x62\x46\xed\xf0\x25\x31\x31\xa7\x9b\x69\x14\x43\x87\x4f\x84\xb6\x25\xe7\x5f\x0f\x96\xba\xae\x07\x73\xba\x25\xf3\x69\x06\x8a\x39\xdd\x0d\xa7\x10\x22\xa6\xf1\xfc\x90\xd3\x2c\xc2\xe8\x50\xe3\xcc\xff\x8e\xa4\xb2\xcb\x01\x66\x7c\xf2\x7d\xf7\x51\x93\xab\x76\x74\x5d\x80\x39\xb8\xff\xd0\x3d\x9b\x63\xfc\xfd\x2f\x00\x00\xff\xff\x36\x43\x51\x70\x7e\x03\x00\x00")

func categoriesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_categoriesHtml,
		"categories.html",
	)
}

func categoriesHtml() (*asset, error) {
	bytes, err := categoriesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.html", size: 894, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4e\xc4\x30\x10\x45\xfb\x9c\x62\x64\xea\x8d\x2f\xe0\x75\x43\xbb\xc5\x16\x7b\x81\xd9\x64\xc8\x8e\x48\x9c\xc8\x1e\x82\xd0\xc8\x15\x3d\x88\xdb\x20\xce\xc3\xde\x03\x25\x4b\x10\x91\x52\xda\xcf\xff\xe9\x7f\xab\x46\x0c\x0d\x41\x79\xe0\x24\x39\x17\xae\xe6\x11\xaa\x16\x53\xda\x9b\xa1\x4f\xb2\xab\xfa\x20\xc8\x81\xa2\xf1\x05\x80\x1b\x56\x50\x58\x5a\x32\xde\x21\x5c\x22\x3d\xec\x8d\xc5\x28\x5c\xb5\xa4\x5a\x1e\x38\x3c\xe6\x6c\xbc\x6a\x79\x9a\x5e\xe5\xec\x2c\x7a\x67\x87\x0d\x4d\x47\x82\xb3\x1e\xc0\xa5\x01\xc3\x02\x6b\x14\x82\x09\xee\x58\xa8\x33\xfe\xfa\xfe\x71\xfd\x7c\xfd\xfe\x7a\x03\xd5\xf2\xf8\x74\x6e\x39\x5d\x4e\xdc\xcd\xee\x29\xb7\xa1\xf8\x97\x9e\x21\x80\xc3\x85\xe1\x4e\xb0\x31\x4b\xf5\x0a\x85\x9a\x3e\x32\x25\xab\x5a\xde\xdf\x4e\x2f\x39\x5b\x03\xf3\xcc\xbd\x59\x5d\x1b\x7f\xf7\x2b\x04\x58\x81\x69\xe6\xad\xc7\x5f\xa7\xed\xd5\x78\x4e\x12\xb1\x92\xf9\x8f\x8e\x91\x46\xa6\xe7\x29\x3e\xf8\xc2\xd9\x9a\x47\x5f\xa8\x52\xa8\x73\x2e\x7e\x02\x00\x00\xff\xff\x3c\x97\x24\x0e\xa5\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 421, mode: os.FileMode(420), modTime: time.Unix(1672975908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xcd\x8b\xe4\xc6\x15\xbf\xf7\x5f\xf1\xac\xcb\xcc\x90\x91\x7a\x3e\x20\x24\x3b\xad\x36\xfb\xc5\x66\x21\xf6\x9a\xdd\x09\x24\x2c\xcb\xf2\x5a\x7a\x2d\xd5\xb4\x54\xa5\x54\x95\xa6\xa7\xdd\x1e\xc8\x25\x21\xc4\xf7\xdc\xf7\x12\x08\xf8\xe2\xc3\x82\x21\xb7\xfc\x2d\x36\x66\xff\x8b\x50\x55\x92\x5a\x5f\x3d\x1e\x6f\xc0\x27\xd5\xc7\xfb\xf8\xd5\xab\x57\xbf\x57\xa5\xd9\x27\x4f\x5e\x3c\xbe\xfc\xd3\x17\x4f\x21\xd5\x79\x36\x9f\xcc\xcc\x07\x32\xe4\x49\xe8\x11\xf7\xe6\x93\xc9\x2c\x25\x8c\xe7\x13\x80\x59\x4e\x1a\x21\x4a\x51\x2a\xd2\xa1\x57\xea\xa5\xff\x1b\x6f\x37\xc1\x31\xa7\xd0\xfb\xa3\xff\x87\x87\xfe\x63\x91\x17\xa8\xd9\x22\x23\x0f\x22\xc1\x35\x71\x1d\x7a\xcf\x9f\x86\x14\x27\x34\xd0\xc0\x52\xa7\x42\xba\x61\xcd\x74\x46\xf3\xed\x16\x82\x4b\xd3\x82\xdb\xdb\xd9\xd4\x8d\x4d\x26\x3d\xb5\x98\x54\x24\x59\xa1\x99\xe0\x2d\x27\x0f\xe1\x51\x26\x12\xf8\x42\xac\x49\x52\x0c\x8f\x36\xf0\x3b\xba\x11\x03\x9f\x2b\xda\xac\x85\x8c\x55\x4b\xb3\x25\xd3\x8c\xad\x59\xac\xd3\x30\xa6\x6b\x16\x91\x6f\x3b\xc7\xc0\x38\xd3\x0c\x33\x5f\x45\x98\x51\x78\x1a\x9c\x1c\x43\x8e\x37\x2c\x2f\xf3\xf6\x50\xa9\x48\xda\x3e\x2e\x32\x0a\x4f\xbc\xca\xef\x35\xa3\x75\x21\xa4\x1e\x73\xb6\x21\x55\x8b\x61\x51\x64\xe4\xe7\x62\xc1\x32\xf2\xd7\xb4\xf0\xb1\x28\xfc\x08\x0b\x63\x6c\x4c\x75\x91\x61\xb4\xba\x53\x59\x69\xd4\xa5\xf2\x17\x28\x7d\xa5\x37\xe3\x56\x34\x65\x54\xa4\x82\x53\xc8\x45\x6d\x6c\x29\x64\x8e\xda\x8f\x49\x53\x64\x43\xdd\x8f\xa4\x24\x1e\x93\x24\xd9\x8a\xe4\x9a\x16\x2b\x56\x2d\x31\x63\x7c\x05\x92\xb2\xd0\xc3\x4c\x93\xe4\xa8\xc9\x03\xbd\x29\x2a\x9c\x2c\x42\x63\x75\x8a\x5a\xe4\xbf\xba\xc9\x33\x0f\xec\x6e\x87\xde\xc3\xcb\x17\x9f\xc1\x69\x70\xe2\x41\x2a\x69\x19\x7a\x56\x22\x30\x12\x7d\x00\x09\x71\x92\xa8\x45\x1b\x81\xd9\x73\xf8\x75\x70\x1e\x9c\x98\x04\x06\x98\x7d\xe2\xfb\x10\x29\x05\xbe\xdf\x43\x65\x83\xa1\x52\x22\xdd\x78\x32\xa1\x62\xd1\x34\x52\x6a\xba\x10\x42\x2b\x2d\xb1\x08\x72\xc6\x83\x48\xa9\xfe\xa2\xee\x56\x5f\x0a\xae\x7d\x5c\x93\x12\x39\x7d\x9c\x85\x42\x32\x95\xef\xd4\xcc\x32\xee\xad\x6b\x67\xfd\x18\xe5\xca\x19\xe8\x2c\x9e\xc5\xa1\xa7\x53\xca\xc9\x37\x73\xf7\x36\x57\x41\xb1\x87\x71\xbb\x05\xb6\x84\xe0\x19\xd3\x98\xad\x82\xc7\x19\x23\xae\x9f\x3f\x81\xdb\xdb\x9f\xb3\xc0\xc4\x6a\x57\x9f\x66\xa1\xdb\x2d\xf1\xf8\xf6\xd6\x79\x31\x4e\x1e\x72\xcc\x36\x5f\x92\x0c\x1e\x21\x8b\x4b\xe7\xc2\x04\xc3\x76\x01\xcd\xac\x66\x51\xb3\xbf\x8e\x19\x4c\x13\xe0\x1a\x25\xbc\x4d\x73\x0d\xa1\xfb\x7c\xf5\x15\xbc\x7e\x73\x61\xa7\x0e\x97\x25\xb7\x59\x0d\x87\x47\xb0\xb5\x43\x4e\x3e\xcd\x21\x84\x58\x44\x65\x4e\x5c\x07\x91\x24\xd4\xf4\x34\x23\xd3\x3b\xf4\x9c\x71\xef\xe8\xa2\x52\x48\xf3\x40\xc9\x08\x42\xf0\x52\xad\x0b\xf5\x60\x3a\x4d\xf3\x60\x61\x80\x05\x91\xc8\x4d\xe7\x4a\x7d\xba\xdd\x0e\xd6\xe0\x5d\xb4\x3c\xaa\xb6\xc3\x84\x74\xe5\x4d\x3d\xda\x5c\x62\xf2\x39\xe6\xb4\xf3\xfb\xfa\xe4\x4d\xad\xa9\x82\x02\x25\x71\xfd\xb9\x88\x29\x60\x5c\x91\xd4\x8f\x68\x29\x24\x1d\xa6\xf9\x31\xa8\x0a\xe2\xed\xd1\xa1\x6d\xcd\xa6\xbb\xb8\xec\x8f\xf0\x33\x21\x92\x8c\x76\x21\x76\x7d\xd0\x98\xc0\x61\xa2\x31\x09\xae\xd4\x51\x37\xce\x80\x6a\xc3\x23\x50\x32\x0a\x9b\x10\xac\xd7\xeb\x20\xb1\x9a\x1a\x93\x1c\x39\x26\x24\x6d\x38\x8c\x89\xe9\x95\xfa\x94\xc5\x61\x3b\x26\xb5\x57\x6f\xde\x46\xd9\xd9\xc8\x35\xe3\xb1\x58\x07\x31\x6a\xfc\x3d\x6e\x48\x42\x38\x1c\x6a\x6d\x6e\xb3\xb7\xc6\xa3\xd9\x5f\x68\xc4\x82\xa2\x54\xe9\x21\xca\xc4\x86\x5b\x1d\x5d\xc0\xad\x55\xb1\x92\x07\x57\xea\xe0\x18\x38\xad\xe1\x09\x6a\x3a\x3c\x3a\xba\x98\xb4\x26\x23\xc1\x97\x2c\x39\x38\x86\x83\x31\xf4\x07\xfb\xe3\x3c\x99\x4d\x5d\x1d\x9d\xcc\x16\x22\xde\xd8\xd5\xc5\xec\x1a\xa2\x0c\x95\x0a\x3d\x43\x5d\xc8\xb8\xe1\x51\x73\x34\x95\xc6\xaa\x52\x76\xc5\xa4\x58\x57\xa3\x7d\xf5\xcc\x57\xb9\x7f\x0e\xa6\x71\xa3\xfc\xd3\x33\x50\x2c\x26\xbf\x31\x0b\x4b\x8c\xe9\x39\x7f\xc9\x92\x54\x57\x2e\xcc\xfc\x02\x65\x63\xaf\x6b\xf1\x9a\xa4\x66\x11\x66\xbe\xa6\x1b\x0d\x8a\x69\xf2\x2d\x35\xb7\xc4\x01\x66\xe9\x79\x2d\xbf\x93\xf0\x55\x8e\x99\x61\x72\x5c\x30\x1e\xd3\x4d\xe8\xf9\xa7\xde\x7c\x86\xb5\x24\x56\x86\x6a\x36\xf0\x76\xf5\xfe\xcc\x16\x7c\x9c\xcf\xa6\xe9\x79\xd7\xcf\xe9\x88\x9f\x0c\x65\x42\x1f\xe5\x67\xe7\xe6\x74\x3e\xd9\x2d\x7f\x1a\xb3\xeb\xf9\x6c\x21\x9b\x18\x30\x65\xee\x30\x7e\x96\x40\xdd\xcc\xe3\xa6\xa9\xf2\x3d\xa1\x6b\x43\x64\x7c\xa5\xea\x78\x6b\xf2\x39\x5e\x77\x03\x58\x66\xed\xae\x25\xce\xee\x80\x39\x04\x05\xf2\xda\xb6\xc9\xa1\x3a\x49\xea\xb6\x14\xa6\x62\x72\xbc\x66\x09\x36\x35\xba\x67\xa3\x89\x0a\xc0\x95\xf2\x1d\xf3\xa3\x3b\x1f\xed\x4e\x1d\xac\x2b\xbc\x46\x97\xc4\x0f\x2e\xbc\xf9\x8c\xd5\xda\x4b\x84\x25\xfa\xaa\xe4\xbe\x30\x27\x95\xcd\x4d\x18\xfb\x78\xa7\x06\x70\x6f\x59\xd3\xfe\xba\xcc\x42\x67\xb8\xdb\x9b\x0f\xff\xfa\xe7\x87\x77\xef\xdd\xae\xdc\x2d\x1b\xa1\xa6\x44\x48\x46\xca\x9b\xff\xf0\xf7\xbf\xfd\xf8\xed\x7f\xf6\x68\x19\xf6\xda\x6e\x41\x22\x4f\x08\x82\xc7\x8d\x9a\x2b\x51\x7b\xcc\xbb\x2c\x69\x12\xa4\x6f\xb4\x3a\xcf\x96\x00\x87\xde\x66\x59\x13\x29\x25\x22\x6f\x67\xb5\xa6\xc5\x84\xe9\xb4\x5c\x58\x22\xcc\x05\x6d\x4a\x34\xe9\x2b\x13\x73\x9d\x7e\xbb\xc8\x90\xaf\xaa\x52\xcc\x85\x28\xcc\xbd\x06\xb8\x90\xb4\x24\x69\x2e\x58\x83\x4d\x45\xc9\xd0\xcf\x70\x61\x14\x9e\x59\xc3\xc3\xad\x4a\xaa\x71\xa8\x37\x6b\x00\x49\xaf\x99\xd6\x15\x39\x3f\xbd\x16\xf1\x67\x0e\xd7\xc0\xdb\xbd\x71\x76\x70\x5d\x3a\xeb\x43\x60\xba\x9e\x68\x21\x1b\xf8\xdc\x21\x7d\x30\xad\x02\x66\x71\x36\x97\xc1\x8f\x44\xf5\xf2\xd5\x2b\x83\x68\xe0\x0f\xba\x18\xa5\xbd\x36\x35\xf8\x4c\x32\x54\x95\x6f\x97\xd7\xdd\x03\xdc\x61\xd0\x9f\x60\x0f\xa8\x19\xc1\x5f\x0a\xe1\x62\xb4\xa3\x9e\xde\x9c\xbf\x90\xbd\x53\x3d\x73\x13\x83\xc3\x57\xcc\xff\xfb\x6f\x38\x3b\x39\x3b\x37\x67\xbe\x1f\x9d\x2a\xc5\x5d\x94\xbc\x6a\x55\xc5\x88\x8d\xfd\xca\x23\x99\x9c\x52\x2c\x78\xa2\xd2\x72\x9a\x08\x3f\x47\xb9\x8a\xc5\x9a\xfb\x0b\x21\x56\x8d\xa7\x27\xa4\x58\xc2\x47\xc8\x02\x60\xb1\xf9\x59\xce\x54\x99\xb3\x1c\x57\x4c\x8b\x69\x4a\x37\xa2\xa2\x32\xbd\x29\x44\x22\xb1\x48\x37\x8d\xcb\xcb\x66\x68\x94\xa3\x8a\x3e\x41\x0d\xe3\xe9\xea\xc1\x64\xb4\x5b\x75\xdc\x4d\xb8\xbf\xf3\x55\x35\xfe\x6d\xab\x1a\xe7\xc8\xf8\xa0\x1a\x5f\x8a\xc2\x31\x79\x77\x76\x4f\x59\xc1\x52\x8b\xc2\xdc\xa3\xd8\x97\xf4\xd6\x34\xde\x92\xbb\x24\x7a\xfb\x32\xb0\x7a\x0f\x79\x63\x54\xf5\xd2\xbe\xdb\x0c\xf9\x43\x54\x4a\x73\x89\x04\x4d\x79\x91\xa1\x26\x48\x49\x52\x2f\xd1\xed\x75\x7f\xc3\x28\x8b\xc1\xdd\x1a\x7b\xe6\xda\x6e\x0b\x4c\x18\xb7\x95\x08\xb8\x4d\x88\x84\x99\x74\xd0\x5a\xe4\x83\xd2\x34\x2b\x1a\xb0\x19\xa1\x5c\xb2\x1b\x6f\x5f\x4a\xfe\xf8\xcd\x37\x70\x0a\x1f\xde\xbd\x87\x29\xfc\xf0\xd7\x6f\xe1\xcc\xb6\x87\x5b\x69\xa5\x3b\x45\xb3\x90\x04\x05\x26\x8b\x52\x6b\xc1\xd5\x90\x8b\x90\x27\xe6\xa5\x24\x4a\x7b\x5c\x69\xa9\x5d\x6d\x33\x79\x39\xa8\xad\x4d\xc5\x1a\x21\x8f\x2e\x25\x7f\xff\xdd\x3f\xbe\xff\xee\x2f\x1f\xde\xbd\xf7\xe6\x4d\xd3\x9d\x38\x5b\x1f\x2d\xc2\x39\xb4\x7b\x35\x2a\x6e\xae\x5c\x1d\xc0\x23\x40\x46\xfd\x57\xe0\x4c\x76\x4c\xcf\xa6\x5e\x0f\xcf\xd7\x3b\x3c\x5f\xef\xf0\xc0\x9d\xe1\x90\xf6\xc6\x58\xd5\x7a\x07\x75\x3c\xe0\xc3\x13\x65\x4e\xc8\x80\x2f\xf7\x1f\xa9\x71\xf6\xbc\x51\x8e\x27\x5d\xfe\x34\x54\xd9\xb6\x39\xc6\x84\xff\x3f\x0f\xfe\x92\x2c\xf8\xcb\x70\x60\x6f\x89\x43\xca\x1b\x63\xb8\x4e\xb3\x66\xbd\xdd\xd3\xcf\x3e\xfa\xea\x07\xfd\x95\x9a\x5e\xfd\xb9\x24\xb9\xf1\xcf\x83\xd3\xe0\xc4\xfe\xf2\xb8\x52\xa3\x4f\xba\x81\x62\xf7\x57\xcb\x7d\xb5\x2a\x77\x39\x4b\x24\x6a\xf2\x4f\x83\xb3\xe0\xf4\x23\x0c\x04\x58\x14\x84\xf2\xde\x5a\xee\xb7\xcc\x7d\xa5\x77\x1b\x73\x6f\x15\x53\x10\x7a\xc2\x3f\xf9\xcb\x65\x8f\xa9\xea\xd7\xca\x1d\x41\x71\x9b\x1c\x09\xae\x34\x38\x69\x08\xed\x03\xd8\xf9\x39\xac\xff\x8c\x44\x95\xbf\x07\xf6\xf1\xdb\x03\x71\x7b\x7b\x70\xdc\x91\x7b\x45\x91\x24\x3d\x22\xeb\x26\x5a\xf2\x92\x0a\xd1\x91\x7b\x49\x85\x68\xcd\x8b\x35\x27\xd9\x11\x78\x61\x46\x5a\x12\x18\xe7\x8c\x3f\x80\xd7\x23\x22\x6f\x6a\x19\x16\x77\x4c\x3c\x8f\x5b\xfa\x96\x21\x95\x31\xe0\xd6\x7f\xf0\xa6\xfa\x71\x52\x3d\xfd\x9d\x8a\xfb\xd5\x79\x58\xcb\x1c\xdd\xf1\xd4\x77\x4f\x7c\xf3\xe6\xb7\x3f\xd5\xff\x17\x00\x00\xff\xff\x8e\x68\x8c\x79\x65\x17\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 5989, mode: os.FileMode(420), modTime: time.Unix(1673051667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"article.html":        articleHtml,
	"categories.html":     categoriesHtml,
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"article.html":    &bintree{articleHtml, map[string]*bintree{}},
	"categories.html": &bintree{categoriesHtml, map[string]*bintree{}},
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
