// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/article.html
// web/views/categories.html
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/home.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _articleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\xc8\x2f\x2e\xd1\x2d\x48\x4c\x4f\x55\xb2\xe3\x52\x50\xa8\xae\xd6\x73\x2c\x2a\xc9\x4c\xce\x49\xad\xad\xe5\xb2\xd1\x4f\xc9\x2c\xb3\xe3\x02\x04\x00\x00\xff\xff\x77\x93\x46\x1f\x2e\x00\x00\x00")

func articleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_articleHtml,
		"article.html",
	)
}

func articleHtml() (*asset, error) {
	bytes, err := articleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "article.html", size: 46, mode: os.FileMode(420), modTime: time.Unix(1672916620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _categoriesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\xaa\xdb\x30\x10\x86\xf7\x39\xc5\xe0\x7d\xac\x0b\x28\x86\x90\x6e\x0a\xa1\x14\x9a\x0b\xa8\xf6\xc4\x1e\x2a\xcb\x46\x92\x93\xc5\x20\xe8\xaa\x29\x3d\x40\x57\xdd\x94\x1e\x20\x74\xdd\xf3\xd4\xb9\x46\xb1\x62\x07\x37\x8f\x07\xef\xc1\xe3\xed\x64\xeb\x1f\xfd\xff\xcc\x37\xcc\xb4\x87\xf4\x43\xd5\x1c\xd7\x5a\x87\xb0\x90\x05\x1d\x20\xd7\xca\xb9\x55\xa2\x6c\x5e\xd1\x01\x41\x19\xaa\x95\xc7\x02\xf6\xaa\xc0\xb7\xe6\x4d\x73\x34\x49\xb6\x00\x90\xed\xa4\x6c\x1b\xe7\x97\x9e\xbc\xc6\x24\xfb\xfb\xf5\xcb\xe5\xf7\x1f\x90\xa2\x8d\x9a\x4e\x4f\x22\x4d\xce\x93\x29\x63\x29\x00\xb3\x55\xa6\x44\x48\x77\x16\x71\x6d\x3d\xe5\x1a\x5d\x08\xf1\x4e\x6a\xba\x2b\x5a\x92\xc7\x7a\xac\x04\x98\x87\x9c\x04\x43\x84\x9b\xe0\xb1\x6c\x52\x41\x65\x71\xbf\x4a\x44\xae\x3c\x96\x8d\x25\x74\x82\x39\x7d\xa7\x6a\x0c\x21\x81\x28\x5b\x25\xfd\xb7\xcf\xfd\x8f\x73\xff\xfd\xd4\xff\xfc\x95\x64\xb7\x7b\x29\x54\x36\xb6\x35\x9a\xb8\x56\x99\xc9\xa7\x50\x1e\xa1\x46\xaf\xc6\xac\xcc\x25\xfa\x4d\x45\xba\xb0\x68\x36\x4d\x67\x3c\xa4\x21\xc0\xe5\x7c\x92\x62\xa8\xbb\x35\x23\x0a\x3a\x5c\x3f\xa4\xd0\x34\x4d\x07\x4d\x11\xa7\x21\x45\xa7\xb3\xc5\x28\x62\x46\xed\xf0\x25\x31\x31\xa7\x9b\x69\x14\x43\x87\x4f\x84\xb6\x25\xe7\x5f\x0f\x96\xba\xae\x07\x73\xba\x25\xf3\x69\x06\x8a\x39\xdd\x0d\xa7\x10\x22\xa6\xf1\xfc\x90\xd3\x2c\xc2\xe8\x50\xe3\xcc\xff\x8e\xa4\xb2\xcb\x01\x66\x7c\xf2\x7d\xf7\x51\x93\xab\x76\x74\x5d\x80\x39\xb8\xff\xd0\x3d\x9b\x63\xfc\xfd\x2f\x00\x00\xff\xff\x36\x43\x51\x70\x7e\x03\x00\x00")

func categoriesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_categoriesHtml,
		"categories.html",
	)
}

func categoriesHtml() (*asset, error) {
	bytes, err := categoriesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.html", size: 894, mode: os.FileMode(420), modTime: time.Unix(1672974723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1672904546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4e\xc4\x30\x10\x45\xfb\x9c\x62\x64\xea\x8d\x2f\xe0\x75\x43\xbb\xc5\x16\x7b\x81\xd9\x64\xc8\x8e\x48\x9c\xc8\x1e\x82\xd0\xc8\x15\x3d\x88\xdb\x20\xce\xc3\xde\x03\x25\x4b\x10\x91\x52\xda\xcf\xff\xe9\x7f\xab\x46\x0c\x0d\x41\x79\xe0\x24\x39\x17\xae\xe6\x11\xaa\x16\x53\xda\x9b\xa1\x4f\xb2\xab\xfa\x20\xc8\x81\xa2\xf1\x05\x80\x1b\x56\x50\x58\x5a\x32\xde\x21\x5c\x22\x3d\xec\x8d\xc5\x28\x5c\xb5\xa4\x5a\x1e\x38\x3c\xe6\x6c\xbc\x6a\x79\x9a\x5e\xe5\xec\x2c\x7a\x67\x87\x0d\x4d\x47\x82\xb3\x1e\xc0\xa5\x01\xc3\x02\x6b\x14\x82\x09\xee\x58\xa8\x33\xfe\xfa\xfe\x71\xfd\x7c\xfd\xfe\x7a\x03\xd5\xf2\xf8\x74\x6e\x39\x5d\x4e\xdc\xcd\xee\x29\xb7\xa1\xf8\x97\x9e\x21\x80\xc3\x85\xe1\x4e\xb0\x31\x4b\xf5\x0a\x85\x9a\x3e\x32\x25\xab\x5a\xde\xdf\x4e\x2f\x39\x5b\x03\xf3\xcc\xbd\x59\x5d\x1b\x7f\xf7\x2b\x04\x58\x81\x69\xe6\xad\xc7\x5f\xa7\xed\xd5\x78\x4e\x12\xb1\x92\xf9\x8f\x8e\x91\x46\xa6\xe7\x29\x3e\xf8\xc2\xd9\x9a\x47\x5f\xa8\x52\xa8\x73\x2e\x7e\x02\x00\x00\xff\xff\x3c\x97\x24\x0e\xa5\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 421, mode: os.FileMode(420), modTime: time.Unix(1672904789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x8b\xe4\xc8\xf1\xbf\xd7\xa7\x88\xd5\xa5\xbb\xf9\xb7\xa4\x7e\xc0\x1f\x7b\x5a\xaa\x65\x5e\xcc\x0e\x78\x76\x96\x99\x36\xd8\x0c\x43\x13\x92\xa2\xa4\xec\x96\x32\xe5\xcc\xac\xae\xae\xad\x6d\xf0\xc5\xc6\x78\xef\xbe\xcf\xc5\x60\xd8\xcb\x1e\x06\x16\x7c\xf3\x67\xd9\x65\x99\x6f\x61\x52\x29\xa9\xf4\xea\x9a\xde\xb1\x71\x5d\x2a\x1f\xf1\xf8\x65\x64\xe4\x2f\x52\x19\x7c\xf6\xe4\xe5\xe3\xf3\xdf\x7f\xf5\x14\x32\x5d\xe4\xf3\x59\x60\xfe\x20\x47\x9e\x86\x0e\x71\x67\x3e\x9b\x05\x19\x61\x32\x9f\x01\x04\x05\x69\x84\x38\x43\xa9\x48\x87\xce\x52\x2f\xdc\x5f\x39\xdb\x09\x8e\x05\x85\xce\xef\xdc\xdf\x3e\x74\x1f\x8b\xa2\x44\xcd\xa2\x9c\x1c\x88\x05\xd7\xc4\x75\xe8\x3c\x7f\x1a\x52\x92\xd2\x48\x03\x97\x3a\x13\xd2\x0e\x6b\xa6\x73\x9a\x6f\x36\xe0\x9d\x9b\x16\xdc\xde\x06\xbe\x1d\x9b\xcd\x06\x6a\x09\xa9\x58\xb2\x52\x33\xc1\x3b\x4e\x1e\xc2\xa3\x5c\xa4\xf0\x95\x58\x91\xa4\x04\x1e\xad\xe1\x0b\xba\x11\x23\x9f\x57\xb4\x5e\x09\x99\xa8\x8e\x66\x47\xa6\x1d\x5b\xb1\x44\x67\x61\x42\xd7\x2c\x26\xb7\xea\x1c\x02\xe3\x4c\x33\xcc\x5d\x15\x63\x4e\xe1\xb1\x77\x74\x08\x05\xde\xb0\x62\x59\x74\x87\x96\x8a\x64\xd5\xc7\x28\xa7\xf0\xc8\xa9\xfd\x5e\x33\x5a\x95\x42\xea\x29\x67\x6b\x52\x8d\x18\x96\x65\x4e\x6e\x21\x22\x96\x93\xbb\xa2\xc8\xc5\xb2\x74\x63\x2c\x8d\xb1\x29\xd5\x28\xc7\xf8\x6a\xa7\xb2\xd2\xa8\x97\xca\x8d\x50\xba\x4a\xaf\xa7\xad\x68\xca\xa9\xcc\x04\xa7\x90\x8b\xc6\xd8\x42\xc8\x02\xb5\x9b\x90\xa6\xb8\x0a\xf5\x30\x92\x92\x78\x42\x92\x64\x27\x92\x2b\x8a\xae\x58\xbd\xc4\x9c\xf1\x2b\x90\x94\x87\x0e\xe6\x9a\x24\x47\x4d\x0e\xe8\x75\x59\xe3\x64\x31\x1a\xab\x3e\x6a\x51\xfc\xdf\x4d\x91\x3b\x50\xed\x76\xe8\x3c\x3c\x7f\xf9\x02\x8e\xbd\x23\x07\x32\x49\x8b\xd0\xa9\x24\x3c\x23\x31\x04\x90\x12\x27\x89\x5a\x74\x11\x98\x3d\x87\xff\xf7\x4e\xbd\x23\x93\xc0\x00\xc1\x67\xae\x0b\xb1\x52\xe0\xba\x03\x54\x55\x30\x54\x46\xa4\x5b\x4f\x26\x54\x2c\xf6\x63\xa5\xfc\x48\x08\xad\xb4\xc4\xd2\x2b\x18\xf7\x62\xa5\x86\x8b\xda\xad\xbe\x10\x5c\xbb\xb8\x22\x25\x0a\xfa\x34\x0b\xa5\x64\xaa\xd8\xaa\x99\x65\xdc\x5b\xb7\x9a\x75\x13\x94\x57\xd6\x40\x6f\xf1\x2c\x09\x1d\x9d\x51\x41\xae\x99\xbb\xb7\xb9\x1a\x4a\x75\x18\x37\x1b\x60\x0b\xf0\x9e\x31\x8d\xf9\x95\xf7\x38\x67\xc4\xf5\xf3\x27\x70\x7b\xfb\x4b\x16\x98\x56\xda\xf5\x5f\xbb\xd0\xcd\x86\x78\x72\x7b\x6b\xbd\x18\x27\x0f\x39\xe6\xeb\xaf\x49\x7a\x8f\x90\x25\x4b\xeb\xc2\x04\xa3\xea\x02\x9a\x59\xcd\xe2\x76\x7f\x2d\x33\x98\x26\xc0\x35\x4a\xb8\xc8\x0a\x0d\xa1\xfd\xfb\xe6\x1b\x78\xf3\xf6\xac\x9a\xda\x5f\x2c\x79\x95\xd5\xb0\x7f\x00\x9b\x6a\xc8\xca\x67\x05\x84\x90\x88\x78\x59\x10\xd7\x5e\x2c\x09\x35\x3d\xcd\xc9\xf4\xf6\x1d\x6b\xdc\x39\x38\xab\x15\xb2\xc2\x53\x32\x86\x10\x9c\x4c\xeb\x52\x3d\xf0\xfd\xac\xf0\x22\x03\xcc\x8b\x45\x61\x3a\x97\xea\xf3\xcd\x66\xb4\x06\xe7\xac\xe3\x51\x75\x1d\xa6\xa4\x6b\x6f\xea\xd1\xfa\x1c\xd3\x2f\xb1\xa0\xad\xdf\x37\x47\x6f\x1b\x4d\xe5\x95\x28\x89\xeb\x2f\x45\x42\x1e\xe3\x8a\xa4\x7e\x44\x0b\x21\x69\x3f\x2b\x0e\x41\xd5\x10\x6f\x0f\xf6\xab\x56\xe0\x6f\xe3\x72\x77\x84\x9f\x09\x91\xe6\xb4\x0d\xb1\xed\x83\xc6\x14\xf6\x53\x8d\xa9\x77\xa9\x0e\xfa\x71\x06\x54\x6b\x1e\x83\x92\x71\xd8\x86\x60\xb5\x5a\x79\x69\xa5\xa9\x31\x2d\x90\x63\x4a\xb2\x0a\x87\x31\xe1\x5f\xaa\xcf\x59\x12\x76\x63\xd2\x78\x75\xe6\x5d\x94\xbd\x8d\x5c\x31\x9e\x88\x95\x97\xa0\xc6\xdf\xe0\x9a\x24\x84\xe3\xa1\xce\xe6\xb6\x7b\x6b\x3c\x9a\xfd\x85\x56\xcc\x2b\x97\x2a\xdb\x47\x99\x56\xe1\x56\x07\x67\x70\x5b\xa9\x54\x92\x7b\x97\x6a\xef\x10\x38\xad\xe0\x09\x6a\xda\x3f\x38\x38\x9b\x75\x26\x63\xc1\x17\x2c\xdd\x3b\x84\xbd\x29\xf4\x7b\x77\xc7\x79\x16\xf8\xb6\x8e\xce\x82\x48\x24\xeb\x6a\x75\x09\xbb\x86\x38\x47\xa5\x42\xc7\x50\x17\x32\x6e\x78\xd4\x1c\x4d\xa5\xb1\xae\x94\x7d\x31\x29\x56\xf5\xe8\x50\x3d\x77\x55\xe1\x9e\x82\x69\xdc\x28\xf7\xf8\x04\x14\x4b\xc8\x6d\xcd\xc2\x02\x13\x7a\xce\x5f\xb1\x34\xd3\xb5\x0b\x33\x1f\xa1\x6c\xed\xf5\x2d\x5e\x93\xd4\x2c\xc6\xdc\xd5\x74\xa3\x41\x31\x4d\x6e\x45\xcd\x1d\x71\x80\x20\x3b\x6d\xe4\xb7\x12\xae\x2a\x30\x37\x4c\x8e\x11\xe3\x09\xdd\x84\x8e\x7b\xec\xcc\x03\x6c\x24\xb1\x36\xd4\xb0\x81\xb3\xad\xf7\x27\x55\xc1\xc7\x79\xe0\x67\xa7\x7d\x3f\xc7\x13\x7e\x72\x94\x29\x7d\x92\x9f\xad\x9b\xe3\xf9\x6c\xbb\x7c\x3f\x61\xd7\xf3\x20\x92\x6d\x0c\x98\x32\x77\x18\x37\x4f\xa1\x69\x16\x49\xdb\x54\xc5\x1d\xa1\xeb\x42\x64\xfc\x4a\x35\xf1\xd6\xe4\x72\xbc\xee\x07\x70\x99\x77\xbb\x15\x71\xf6\x07\xfa\xa6\x4d\x0a\x35\x39\xd2\xb4\xa5\x30\x05\x93\xe3\x35\x4b\xb1\x2d\xd1\x03\x13\x6d\x50\x00\x2e\x95\x6b\x89\x1f\xed\xf1\xe8\x76\x9a\x58\x5d\xe2\x35\xda\x1c\x7e\x70\xe6\xcc\x03\xd6\x68\x2f\x10\x16\xe8\xaa\x25\x77\x85\x39\xa8\x6c\x6e\xa2\x38\x84\x5b\x45\xb1\xbf\x28\x7f\xb8\x2a\xb3\xcc\x00\xb7\x3b\xf3\xe1\xef\x7f\xfb\xf0\xee\xbd\xdd\x93\xdd\xb2\x31\x6a\x4a\x85\x64\xa4\x9c\xf9\x4f\x7f\xf9\xf3\xcf\xdf\xff\x73\x5a\x6b\xb3\x01\x89\x3c\x25\xf0\x1e\xb7\x1a\xb6\x36\xdd\x61\xd9\xa6\x47\x9b\x19\x63\x7b\x2d\x61\xf6\x0c\xb4\x9b\x2e\x62\x67\x6b\xac\xa1\xc1\x94\xe9\x6c\x19\x55\xc4\x57\x08\x5a\x2f\xd1\xa4\xab\x4c\xcd\xf5\xf9\x22\xca\x91\x5f\xd5\xa5\x97\x0b\x51\x9a\x7b\x0c\x70\x21\x69\x41\xd2\x5c\xa8\x46\xbb\x88\x92\xa1\x9b\x63\x64\x14\x9e\x55\x86\xc7\x7b\x93\xd6\xe3\xd0\xec\xce\x08\x92\x5e\x31\xad\x6b\x32\x7e\x7a\x2d\x92\x17\x16\xd7\xc8\xdb\xbd\x71\xf6\x70\x9d\x5b\xeb\x63\x60\xba\x99\xe8\x20\x1b\xf9\xdc\x22\x7d\xe0\xd7\x01\xab\x70\xb6\x97\xbf\x4f\x44\xf5\xea\xf5\x6b\x83\x68\xe4\x0f\xfa\x18\x65\x75\x4d\x6a\xf1\x0d\x72\x20\xf0\xfb\x87\xb5\xc7\x96\x1f\x61\x0a\x68\x4e\xbf\xbb\x10\xc2\xc6\x67\x4b\x33\x83\x39\x37\x92\x83\x23\x1c\xd8\x89\xd1\x49\x2b\xe7\xff\xfa\x07\x9c\x1c\x9d\x9c\x9a\x03\x3e\x8c\xcc\x1d\xb1\xdc\x11\xb2\xf9\x85\x5d\x76\x39\xe1\x08\x2e\x76\xba\x18\xe4\xfa\xeb\x65\xc1\x5e\xe0\x15\xd3\xc2\xcf\xe8\x46\xd4\x84\xa3\xd7\xa5\x48\x25\x96\xd9\x7a\x9c\x6d\xb0\x03\xd6\x79\xab\x67\xf0\x41\xb4\xde\xbd\xdc\xe6\xfa\x71\x45\x54\x7a\x85\xa0\x5f\xe6\xec\x8b\x27\xaf\x27\xa3\x10\xf8\xe3\x4d\x18\x50\x5d\xaf\x5b\x77\xec\x55\x79\x98\x2e\x75\xb9\xfe\x75\xa7\x5c\x17\xc8\xf8\xa8\x5c\x9f\x8b\xd2\x72\x7d\x7f\xf6\x8e\xba\x83\x4b\x2d\x4a\x73\xd1\x62\x5f\xd3\x85\x69\x5c\x90\xbd\x45\x3a\x77\xa5\x6d\xfd\xc1\xe4\xcc\x07\xb4\x66\xee\x7d\xaf\xaa\x0f\x3b\x53\x1e\x20\x5e\x4a\x73\xcb\x04\x4d\x45\x99\xa3\x26\xc8\x48\x52\x7d\x07\xdc\xfe\x36\x1b\x58\x33\xca\x13\x18\xb1\x64\xf5\xd9\xd2\x71\x5b\x62\xca\x78\x55\xab\x80\x0b\xb7\x40\x99\x32\xee\x46\x42\x6b\x51\x8c\x8a\x57\x50\xb6\x60\x73\x42\xb9\x60\x37\xce\x5d\x29\xfa\xf3\x77\xdf\xc1\x31\x7c\x78\xf7\x1e\x7c\xf8\xe9\x4f\xdf\xc3\x49\xd5\x86\x69\xe9\x40\x95\xc8\x5b\x40\x92\xa0\xc4\x34\x5a\x6a\x2d\xb8\x1a\x93\x17\xf2\xd4\x7c\x4a\x89\x65\x75\xc6\x69\xa1\x6d\xf5\x33\x79\x38\xaa\xbe\x6d\x51\x9b\x48\xbb\x3e\x87\xff\xf8\xc3\x5f\x7f\xfc\xe1\x8f\x1f\xde\xbd\x77\xe6\x6d\xd3\xe6\x9e\xc1\x66\x11\x1a\x3a\xda\xf6\x1a\x54\xdc\xdc\xc9\x7a\x80\x27\x80\x4c\xfa\xaf\xc1\x99\xec\xf0\x4f\x7c\x67\x80\xe7\xdb\x2d\x9e\x6f\xb7\x78\x60\x67\x38\x64\x75\xa5\xac\x6f\x03\x16\xea\x74\xc0\xc7\x27\xca\x9c\x90\x41\x1a\xed\x3a\x52\xd3\x94\x7b\xa3\x2c\xb9\xda\xfc\x69\xf9\xb5\x6b\x73\x8a\x3e\xff\xeb\xe4\x69\xeb\xe8\x34\x77\x94\xf3\x73\xc3\x80\x1f\xe7\xad\xff\x88\x43\xff\x87\x0c\xba\x23\x0c\x15\xe4\x89\x30\x8c\x09\x74\x8a\x2f\x7b\xcd\x86\x43\xb7\x5f\x9a\xd5\x37\x66\xf3\x7e\x70\xa9\xfc\xcb\x3f\x2c\x49\xae\xdd\x53\xef\xd8\x3b\xaa\x5e\x58\x2e\xd5\xe4\x17\xe4\x48\xb1\xff\xb2\x73\x5f\xad\xda\x5d\xc1\x52\x89\x9a\xdc\x63\xef\xc4\x3b\xfe\x04\x03\x1e\x96\x25\xa1\xbc\xb7\x96\x7d\x05\xba\xaf\xf4\x36\x45\xee\xad\x62\xca\xcb\x40\xf8\xa3\x2f\x3c\x77\x98\xaa\x5f\x72\x76\x04\xc5\x6e\x72\x2c\xb8\xd2\x60\xa5\x21\xac\xbe\xb7\xad\x9f\xfd\xe6\x21\x26\xae\xfd\x3d\xa8\xbe\xb5\x07\x20\x6e\x6f\xf7\x0e\x7b\x72\xaf\x29\x96\xa4\x27\x64\xed\x44\x47\x5e\x52\x29\x7a\x72\xaf\xa8\x14\x9d\x79\xb1\xe2\x24\x7b\x02\x2f\xcd\x48\x47\x02\x93\x82\xf1\x07\xf0\x66\x42\xe4\x6d\x23\xc3\x92\x9e\x89\xe7\x49\x47\xbf\xe2\x5b\x65\x0c\xd8\xf5\xef\xbd\xad\xdf\x69\xea\x97\x06\xab\x62\x5f\x56\xf7\x1b\x99\x83\x1d\x2f\x0b\xf6\x45\x61\x16\xf8\xf6\x0d\xff\xdf\x01\x00\x00\xff\xff\xf0\x0b\xe7\x33\xd4\x17\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 6100, mode: os.FileMode(420), modTime: time.Unix(1672975163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"article.html":        articleHtml,
	"categories.html":     categoriesHtml,
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"article.html":    &bintree{articleHtml, map[string]*bintree{}},
	"categories.html": &bintree{categoriesHtml, map[string]*bintree{}},
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
